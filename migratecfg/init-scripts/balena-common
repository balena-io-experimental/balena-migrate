#!/bin/sh

############################################################################
# Make sure there is enough memory to copy the image file & backup to the
# initramfs
############################################################################

checkMem() {
	totMem=$(< /proc/meminfo grep "MemTotal:")
	# shellcheck disable=SC2003
	totMem=$(expr match "$totMem" '[^:]\+:[^0-9]\+\([0-9]\+\)[^0-9]*kB') || true
	# totMem=`expr $totMem \* 1024` || true

	log "total memory: ${totMem} kB"

	freeMem=$(< /proc/meminfo grep "MemFree:") || true
	# shellcheck disable=SC2003
	freeMem=$(expr match "$freeMem" '[^:]\+:[^0-9]\+\([0-9]\+\)[^0-9]*kB') || true
	# freeMem=`expr $freeMem \* 1024` || true
	leftMem=$freeMem

	log "free memory:  ${freeMem} kB"
  # shellcheck disable=SC2154
	if [ -f "${rootmnt}${HOME_DIR}/${IMAGE_FILE}" ] ; then
	  tmp=$(stat -c %s "${rootmnt}${HOME_DIR}/${IMAGE_FILE}")
		tmp=$((tmp / 1024))
		log "image file size: ${tmp} kB "
	  leftMem=$((freeMem - tmp))
	fi

	if [ -f "${rootmnt}${HOME_DIR}/${BACKUP_FILE}" ] ; then
	  tmp=$(stat -c %s "${rootmnt}${HOME_DIR}/${BACKUP_FILE}")
		tmp=$((tmp / 1024))
		log "backup file size: ${tmp} kB"
	  leftMem=$((leftMem - tmp))
	fi

	log "est. memory left after subtracting image & backup size: ${leftMem} kB "

	# shellcheck disable=SC2086
	if [ $leftMem -lt $MEM_MIN_FREE ] ; then
		fail "not enough memory will be left after copying image & backup files, est.: ${leftMem} kB, currently free: ${freeMem} kB"
	fi
}

############################################################################
# Log message to the current log destination
############################################################################

logMsg() {
	if [ -z "$LOG_TO" ] ; then
		_log_msg "${1}\n"
	else
		echo "${1}" >> "$LOG_TO" || _log_msg "${1}\n"
	fi
}

#################################################################################
# Set the log destination, copy existing logfile to new destination if it exists
#################################################################################

log_to() {
	NEW_LOG=$1

	LOG_DIR=$(dirname "$NEW_LOG")
	if [ ! -d "$LOG_DIR" ] ; then
		mkdir -p "$LOG_DIR"	|| fail  "failed to create log directory $LOG_DIR"
	fi

  if [ -n "$LOG_TO" ] && [ -f "$LOG_TO" ] ; then
    cp "$LOG_TO" "$NEW_LOG" || fail  "failed to copy log file $LOG_TO to $NEW_LOG"
	else
		touch "$NEW_LOG" ||  fail  "failed to create log file $NEW_LOG"
  fi

  LOG_TO=$NEW_LOG
}

#################################################################################
# log a regular message
#################################################################################

log() {
	logMsg "LOG: $1"
}

#################################################################################
# log a debug message
#################################################################################

debug() {
	if [ -n "$DEBUG_STAGE2" ] ; then
		logMsg "DEBUG: $1"
  fi
}

#################################################################################
# log & terminate 'normally' - prematurely
#################################################################################

term() {
	logMsg "TERM: $1"

	if [ -n "$LOG_TO" ] && [ -f "$LOG_TO" ] ; then
		cat "$LOG_TO"
  fi

	if [ -n "$UMOUNT_LOG" ] ; then
		umount "$UMOUNT_LOG" || true
	fi

	# shellcheck disable=SC2086
	if [ "$(echo \"${FAIL_EXIT}\" | grep -c reboot)" -eq 1 ] ; then
		$FAIL_EXIT
  else
		if [ -n "$TERM_EXIT" ] ; then
			$TERM_EXIT
		else
			$FAIL_EXIT
		fi
	fi
}

#################################################################################
# log & fail
#################################################################################

fail() {
	logMsg "ERROR: $1"
	logMsg "ERROR: terminating with $FAIL_EXIT"
	if [ -n "$LOG_TO" ] && [ -f "$LOG_TO" ] ; then
		cat "$LOG_TO"
  fi

	if [ -n "$UMOUNT_BOOT" ] ; then
		umount "$UMOUNT_BOOT" || true
	fi

	if [ -n "$UMOUNT_LOG" ] ; then
		umount "$UMOUNT_LOG" || true
	fi

	# TODO: umount some more

	$FAIL_EXIT
}


#################################################################################
# mount a device, waiting for it to show up
#################################################################################

mount_device() {
	MNT_FS_NAME=$1
	MNT_FS_TYPE=$2
	MNT_DIR=$3

	if [ ! -d "${MNT_DIR}" ] ; then
	  mkdir -p "${MNT_DIR}" || fail "failed to create mount dir ${MNT_DIR}"
	fi

	loopCount=0
	while [ ! -b "${MNT_FS_NAME}" ] && [ $loopCount -lt 3 ] ;
	do
		 log "log device not present: ${MNT_FS_NAME} waiting.."
		 udevadm settle --timeout=5
		 sleep 10
		 loopCount=$((loopCount + 1))
	done

	if [ -b "${MNT_FS_NAME}" ] ; then
		if ! mount -w -t "${MNT_FS_TYPE}" "${MNT_FS_NAME}" "${MNT_DIR}" >>"$LOG_TO" 2>&1  ; then
		  log "failed to mount device using  mount -w -t ${MNT_FS_TYPE} ${MNT_FS_NAME} ${MNT_DIR}"
			return 1
		else
			log "mounted device ${MNT_FS_NAME} on ${MNT_DIR}"
			return 0
	  fi
	else
		log "device not present: ${MNT_FS_NAME}"
		return 1
	fi
}
