#!/bin/sh

PREREQ=""
prereqs()
{
	echo "$PREREQ"
}

case $1 in
prereqs)
	prereqs
	exit 0
	;;
esac

set -e

if [ -f /scripts/functions ] ; then
		# shellcheck disable=SC1091
    . /scripts/functions
fi

# if [ -f /scripts/local ] ; then
#     . /scripts/local
# fi

if [ -f /etc/balena-migrate-stage2.conf ] ; then
    . /etc/balena-migrate-stage2.conf
else
    panic  "/etc/balena-migrate-stage2.conf not found"
fi

if [ -f /scripts/balena-common ] ; then
	# shellcheck source=/home/thomas/develop/balena.io/migrate/migratecfg/init-scripts/balena-common
    . /scripts/balena-common
else
		panic  "/scripts/balena-common not found"
fi

# STRATEGY removed, there is only DEFAULT
# if [  "$STRATEGY" != "DEFAULT" ] ; then
#    log "balena-stage2-default not enabled"
#    exit 0
#fi

# Enable DEBUB output (debug function in balena-common)
# DEBUG_STAGE2=	#"TRUE"
# Set Failure exit to panic
FAIL_EXIT="panic"
# initialize log destination
LOG_TO=
log_to "${MIGRATE_TMP}/${LOG_FILE}"

log "balena-stage2-default started"

#############################################################
# enable logging to external destination
#############################################################
if [ -n "$LOG_DRIVE" ] ; then
	if mount_device ${LOG_DRIVE} ${LOG_FS_TYPE} ${LOG_MOUNT_DIR} ; then
		log_to 	"${LOG_MOUNT_DIR}/${LOG_FILE}"
		UMOUNT_LOG="${LOG_MOUNT_DIR}"
  else
		LOG_DRIVE=
	fi
fi

#############################################################
# Restore former boot configuration on non grub systems
#############################################################

if [ -n "$RESTORE_BOOT" ] ; then
	log "attempting to restore boot configuration"

	# shellcheck disable=SC2153
	if [ "$MOUNT_BOOT" = "TRUE" ] ; then
		# attempt to mount boot device
		if ! mount_device ${ORIG_BOOT_PART} ${ORIG_BOOT_FS_TYPE} "${ORIG_BOOT_MNT}" ; then
		 	log "failed to mount ${ORIG_BOOT_PART}"
		else
			UMOUNT_BOOT=${ORIG_BOOT_MNT}
	 fi
	fi

	log "restoring boot with ${RESTORE_BOOT}"
	sh -c "${RESTORE_BOOT}" >>"$LOG_TO" 2>&1 || fail "failed to restore boot configuration"

	if [ -n "$UMOUNT_BOOT" ] ; then
		umount "${UMOUNT_BOOT}" >>"$LOG_TO" 2>&1 || fail "failed to unmount ${UMOUNT_BOOT}"
		UMOUNT_BOOT=
	fi

	log "done restoring original boot configuration"
fi

######################################################################
# make sure we have enough meeory to copy files to initramfs
######################################################################
checkMem

######################################################################
# copy image file and backup file to initramfs
######################################################################

if [ ! -d ${MIGRATE_TMP} ] ; then
     fail  "could not find migrate dir: ${MIGRATE_TMP}"
fi

log "copying image from ${rootmnt}${HOME_DIR}/${IMAGE_FILE} to ${MIGRATE_TMP}/"
cp "${rootmnt}${HOME_DIR}/${IMAGE_FILE}" "${MIGRATE_TMP}/" >>"$LOG_TO" 2>&1 || fail  "failed to copy ${rootmnt}${HOME_DIR}/${IMAGE_FILE}  to ${MIGRATE_TMP}/"
log "..done"

if [ -f "${rootmnt}${HOME_DIR}/${BACKUP_FILE}" ] ; then
	log "copying backup from ${rootmnt}${HOME_DIR}/${BACKUP_FILE} to ${MIGRATE_TMP}/"
	cp "${rootmnt}${HOME_DIR}/${BACKUP_FILE}" "${MIGRATE_TMP}/" >>"$LOG_TO" 2>&1 || fail  "failed to copy ${rootmnt}${HOME_DIR}/${IMAGE_FILE}  to ${MIGRATE_TMP}/"
	log "..done"
fi

######################################################################
# create mountpoints for resin-boot & resin-data
######################################################################

log "creating mountpoint on ${BOOT_MNT_DIR}"
mkdir -p ${BOOT_MNT_DIR} || fail "failed to create directory ${BOOT_MNT_DIR}"
if [ ! -d ${BOOT_MNT_DIR} ] ; then
     fail  "failed to create mount directory in ${BOOT_MNT_DIR}"
fi
log "..done"

log "creating mountpoint on ${DATA_MNT_DIR}"
mkdir -p ${DATA_MNT_DIR}  || fail "failed to create directory ${DATA_MNT_DIR}"
if [ ! -d ${DATA_MNT_DIR} ] ; then
     fail  "failed to create mount directory in ${DATA_MNT_DIR}"
fi
log "..done"

######################################################################
# terminate if in NO_FLASH / test mode
######################################################################

freeMem=$(< /proc/meminfo grep "MemFree:") || true
# shellcheck disable=SC2003
freeMem=$(expr match "$freeMem" '[^:]\+:[^0-9]\+\([0-9]\+\)[^0-9]*kB') || true
log "Free memory after copy to initramfs: $freeMem kB"


######################################################################
# terminate if in NO_FLASH / test mode
######################################################################

if [ "$NO_FLASH" = "TRUE" ] ; then
	term "terminating prematurely "
fi

######################################################################
# unmount root and set exit strategy to reboot
######################################################################

log "unmounting root"
umount "${rootmnt}" || fail  "failed umount ${rootmnt}"
# TODO: remount as third exit ?
FAIL_EXIT="reboot -f"
log "..done"

######################################################################
# unmount root and set exit strategy to reboot
######################################################################

if [ -n "$MAX_BADBLOCKS" ] ; then	
	log "MAX_BADBLOCKS=$MAX_BADBLOCKS"
	# shellcheck disable=SC2003
	max=$(expr match "$MAX_BADBLOCKS" '^\([0-9]\+\)%$')	|| true
	if [ -n "$max" ]  ; then 
		log "max=$max %"
		totBlocks=$(blockdev --getsize "$BOOT_DEV")
		# shellcheck disable=SC2003
		max=$(expr "$max" '*' "$totBlocks")
		# shellcheck disable=SC2003
		max=$(expr "$max" '/' 100)
	else 
		# shellcheck disable=SC2003
		max=$(expr match "$MAX_BADBLOCKS" '^\([0-9]\+\)$')	|| true	
	fi 
	
	log "max bad blocks=$max"

	count=0
	if [ -n "$max" ] ; then
		fifo="${MIGRATE_TMP}/cmdFifo"
		mkfifo "$fifo"

		if [ -z "$LOG_TO" ] ; then 
			badblocks -n -v $BOOT_DEV > "$fifo" &	
		else
			badblocks -n -v $BOOT_DEV > "$fifo" 2>>$LOG_TO &
		fi 
		
		pid=$!
		log "badblocks started"
		while read -r line ;
		do
			# shellcheck disable=SC2003
			log "line=$line"
			count=$(expr "$count" '+' 1)
			term=$(expr "$count" '>' "$max") || true 
			if [ -n "$term" ] && [ "$term" = "1" ] ; then 
				kill -9 "$pid" 2>/dev/null || true
				fail "not writing image, too many bad blocks: $count , max: $max"
			fi 		
		done < "$fifo"
		rm "$fifo"
		log "found ${count} bad blocks, max ${max}"
	else
		log "failed to parse $MAX_BADBLOCKS - no check performed"
	fi	
fi

######################################################################
# flash the balenaOS image
######################################################################

log "flashing image from ${MIGRATE_TMP}/${IMAGE_FILE} to ${BOOT_DEV} "
log "attempting gzip -d -c ${MIGRATE_TMP}/${IMAGE_FILE} | dd of=${BOOT_DEV} bs=4M \n"
gzip -d -c "${MIGRATE_TMP}/${IMAGE_FILE}" | dd of=${BOOT_DEV} bs=4194304 || fail  "failed with gzip -d -c ${MIGRATE_TMP}/${IMAGE_FILE} | dd of=${BOOT_DEV} bs=4194304"
log "..done"

######################################################################
# make kernel aware of the new partition table
######################################################################

partprobe $BOOT_DEV >>"$LOG_TO" 2>&1 || fail  "failed to reread partitions on $BOOT_DEV"

######################################################################
# mount resin-boot
######################################################################

log "mounting resin-boot using: mount -w -t $BOOT_PART_TYPE $BOOT_PART_NAME $BOOT_MNT_DIR"
mount -w -t $BOOT_PART_TYPE $BOOT_PART_NAME "$BOOT_MNT_DIR" >>"$LOG_TO" 2>&1 || fail  "failed to mount resin-boot partition"
UMOUNT_RESIN_BOOT="$BOOT_MNT_DIR"
log "..done"

######################################################################
# copy config.json & system-connections
######################################################################

# copy networking config
log "copying network config to resin-boot "
for file in $NETWORK_CONFIGS; do
	log "copying ${MIGRATE_TMP}/$file"
	cp "${MIGRATE_TMP}/$file" "${BOOT_MNT_DIR}/system-connections/$file" >>"$LOG_TO" 2>&1  || log "no network config copied"
done
log "..done"

if [ -n "$BALENA_CONFIG" ] && [ -f "${MIGRATE_TMP}/${BALENA_CONFIG}" ] ; then
	log "copying balena config to resin-boot "
	cp "${MIGRATE_TMP}/${BALENA_CONFIG}" "${BOOT_MNT_DIR}/config.json" >>"$LOG_TO" 2>&1  || log "no balena config copied"
	log "..done"
fi


######################################################################
# install grub bootloader if required
######################################################################

## ALT no grub install
## taken from resin-init-flasher-board STEM ver 2.26.0-rev2
#if [ -z $INSTALL_UEFI ]; then
#    echo "[resin-init-flasher-board] non-UEFI installation."
#    rm -rf "$INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/EFI"
#    dd if=/mnt/boot/grub/boot.img of=/dev/$internal_dev conv=fdatasync bs=1M
#    dd if=/mnt/boot/grub/core.img of=/dev/$internal_dev conv=fdatasync bs=512 seek=1
#else
#    echo "[resin-init-flasher-board] UEFI installation."
#    rm -rf "$INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/grub"
#fi


if [ -n "$GRUB_INSTALL" ] ; then
	log "setting up grub boot config: GRUB_INSTALL = $GRUB_INSTALL"

	if [ -f ${MIGRATE_TMP}/grub.cfg ] ; then
		log "copying grub.cfg"
		mkdir -p ${BOOT_MNT_DIR}/grub >>$LOG_TO 2>&1 || fail "failed to create directory ${BOOT_MNT_DIR}/grub"
		cp ${MIGRATE_TMP}/grub.cfg ${BOOT_MNT_DIR}/grub/ >>$LOG_TO 2>&1 || fail "failed to copy ${MIGRATE_TMP}/grub.cfg"
	else
		fail "no grub config found"
	fi

	if [ "$GRUB_INSTALL" = "FLASH" ] ; then
		if [ -f "${MIGRATE_TMP}/boot.img" ] && [ -f "${MIGRATE_TMP}/core.img" ] ; then
			log "flashing boot.img / core.img to boot device"
			# install grub img files
			if [ -d "${BOOT_MNT_DIR}/EFI" ]  ; then
				log "deleting ${BOOT_MNT_DIR}/EFI"
				rm -rf ${BOOT_MNT_DIR}/EFI >>"$LOG_TO" 2>&1 || log "failed to delete ${BOOT_MNT_DIR}/EFI"
			fi
			dd if="${MIGRATE_TMP}/boot.img" of=dd of=${BOOT_DEV} bs=512 >>"$LOG_TO" 2>&1 || fail "failed to flash ${MIGRATE_TMP}/boot.img"
			dd if="${MIGRATE_TMP}/core.img" of=${BOOT_DEV} bs=512 seek=1	>>"$LOG_TO" 2>&1 || fail "failed to flash ${MIGRATE_TMP}/core.img"
			sync
		else
			fail "grub images not found, falling back to grub-install"
		fi
	fi

	if [ "$GRUB_INSTALL" = "INSTALL" ] ; then
		log "attempting grub install with type $GRUB_BOOT_TYPE"

		# if [ "${FLASH_BOOTLOADER}" == "TRUE" ] ; then
		# 		inform "flashing boot.img os to ${ORIG_BOOT_DEV}"
		# 		dd if=${BOOT_IMG_FILE} of=${ORIG_BOOT_DEV} conv=fdatasync bs=1
		# 		inform "flashing core.img os to ${ORIG_BOOT_DEV}"
		# 		dd if=${CORE_IMG_FILE} of=${ORIG_BOOT_DEV} conv=fdatasync bs=1 seek=512
		# fi

		if [ "$GRUB_BOOT_TYPE" = "legacy" ] ; then
			######################################################################
			# install grub legacy bootloader
			######################################################################

			if [ -d "${BOOT_MNT_DIR}/EFI" ]  ; then
				log "deleting ${BOOT_MNT_DIR}/EFI"
				rm -rf ${BOOT_MNT_DIR}/EFI >>"$LOG_TO" 2>&1 || log "failed to delete ${BOOT_MNT_DIR}/EFI"
			fi

			GRUB_CMD="grub-install 	--no-floppy --boot-directory=${BOOT_MNT_DIR}"
			GRUB_CMD="${GRUB_CMD} ${BOOT_DEV}"

			$GRUB_CMD >>"$LOG_TO" 2>&1 || fail "failed to install grub with $GRUB_CMD"
		else
			# 									 \
			######################################################################
			# install grub UEFI bootloader
			######################################################################

			log "Add UEFI boot entry for starting resinOS from internal media."

			if [ -f ${MIGRATE_TMP}/grub.cfg ] ; then
				log "copying grub.cfg"
				cp ${MIGRATE_TMP}/grub.cfg  ${BOOT_MNT_DIR}/EFI/BOOT/ >>$LOG_TO 2>&1 || fail "failed to copy ${MIGRATE_TMP}/grub.cfg"
			else
				fail "no grub config found"
			fi

			efibootmgr -c -d ${BOOT_DEV} -p 1 -L "resinOS" -l "\EFI\BOOT\bootx64.efi" || fail "failed to install uefi boot manager with: efibootmgr -c -d ${BOOT_DEV} -p 1 -L resinOS -l \EFI\BOOT\bootx64.efi"
	#
	#		log "attempting grub-install 	--no-floppy --efi-directory=${BOOT_MNT_DIR} --boot-directory=${BOOT_MNT_DIR}"
	#		grub-install 	--no-floppy \
	#									--efi-directory=${BOOT_MNT_DIR} \
	#									--boot-directory=${BOOT_MNT_DIR} \
	#									${BOOT_DEV} >>"$LOG_TO" 2>&1 || fail "failed to install grub"
		fi
	fi
else
	log "not a grub install"
fi

######################################################################
# mount resin-data
######################################################################

log "mounting resin-data using: mount -w -t $DATA_PART_TYPE $DATA_PART_NAME $DATA_MNT_DIR"
mount -w -t $DATA_PART_TYPE $DATA_PART_NAME "$DATA_MNT_DIR" >>$LOG_TO 2>&1 || fail  "failed to mount resin-data partition"
UMOUNT_RESIN_DATA="$DATA_MNT_DIR"
log "..done"

############################################################################
# redirect logging to resin-data if no external log drive is set & mounted
############################################################################

if [ -z "$UMOUNT_LOG" ] ; then
	log_to "$DATA_MNT_DIR/$LOG_FILE"
fi

######################################################################
# copy backup file to resin-data
######################################################################

if [ -f "${MIGRATE_TMP}/${BACKUP_FILE}" ] ; then
	log "copying backup to resin-data"
	cp "$MIGRATE_TMP/$BACKUP_FILE" "$DATA_MNT_DIR" >>$LOG_TO 2>&1 || fail "failed to create backup"
	sync
	log "...done"
fi

######################################################################
# unmount all mounted drives
######################################################################

sleep 1

if [ -z "$UMOUNT_LOG" ] ; then
	LOG_TO=/dev/null
fi

if [ -n "$UMOUNT_RESIN_BOOT" ] ; then
	umount $UMOUNT_RESIN_BOOT >>"$LOG_TO" 2>&1 || log "failed to umount $UMOUNT_RESIN_BOOT"
fi

if [ -n "$UMOUNT_RESIN_DATA" ] ; then
	umount $UMOUNT_RESIN_DATA >>"$LOG_TO" 2>&1 || log "failed to umount $UMOUNT_RESIN_DATA"
fi

if [ -n "$UMOUNT_LOG" ] ; then
	umount $UMOUNT_LOG || true
fi

######################################################################
# finished
######################################################################

reboot -f
