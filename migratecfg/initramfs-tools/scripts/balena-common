#!/bin/sh

checkMem() {
	totMem=`cat /proc/meminfo | grep "MemTotal:"`
	totMem=`expr match "$totMem" '[^:]\+:[^0-9]\+\([0-9]\+\)[^0-9]*kB'` || true
	totMem=`expr $totMem \* 1024` || true

	log "total memory: $totMem"

	freeMem=`cat /proc/meminfo | grep "MemFree:"` || true
	freeMem=`expr match "$freeMem" '[^:]\+:[^0-9]\+\([0-9]\+\)[^0-9]*kB'` || true
	freeMem=`expr $freeMem \* 1024` || true
	leftMem=$freeMem

	log "free memory: $freeMem"

	if [ -f "${rootmnt}${HOME_DIR}/${IMAGE_FILE}" ] ; then
	  tmp=`stat -c %s "${rootmnt}${HOME_DIR}/${IMAGE_FILE}"`
		log "image file size: $tmp"
	  leftMem=`expr $freeMem - $tmp`
	fi

	if [ -f "${rootmnt}${HOME_DIR}/${BACKUP_FILE}" ] ; then
	  tmp=`stat -c %s "${rootmnt}${HOME_DIR}/${BACKUP_FILE}"`
		log "backup file size: $tmp"
	  leftMem=`expr $leftMem - $tmp`
	fi

	log "est. memory left after subtracting image & backup size: $leftMem"

	if [ $leftMem -lt $MEM_MIN_FREE ] ; then
		fail "not enough memory will be left after copying image & backup files, est.: $leftMem, currently free: $freeMem"
	fi
}


logMsg() {
	if [ -z "$LOG_TO" ] ; then
		fail "logMsg LOG_TO not set"
	fi

	if [ ! -f $LOG_TO ] ; then
		LOG_DIR=$(dirname $LOG_TO)
		if [ ! -d $LOG_DIR ] ; then
			mkdir -p $LOG_DIR	|| fail  "failed to create directory $LOG_DIR"
		fi
  fi

	echo $1 >> "$LOG_TO"
}

log_to() {
  NEW_LOG=$1
  if [ -n "$LOG_TO" ] ; then
    cp "$LOG_TO" "$NEW_LOG"
  fi
  LOG_TO=$NEW_LOG
}

log() {
	logMsg "LOG: $1"
}

term() {
	logMsg "TERM: $1"
	cat "$LOG_TO"
	if [ -n "$UMOUNT_LOG" ] ; then
		umount $UMOUNT_LOG || true
	fi

  if [[ ! $FAIL_EXIT =~ ^\ *reboot ]] ; then
		if [ -n "$TERM_EXIT" ] ; then
			$TERM_EXIT
		else
			$FAIL_EXIT $1
		fi
  else
		$FAIL_EXIT
	fi
}

fail() {
	logMsg "ERROR: $1"
  if [[ ! "$FAIL_EXIT" =~ ^\ *reboot ]] ; then
		log $1
		cat "$LOG_TO"
	fi

	$FAIL_EXIT
}

mount_device() {
	MNT_FS_NAME=$1
	MNT_FS_TYPE=$2
	MNT_DIR=$3
	TOLERATE=$4

	if [ ! -d ${MNT_DIR} ] ; then
	  mkdir -p ${MNT_DIR} || fail "failed to create mount dir ${MNT_DIR}"
	fi

	loopCount=0
	while [ ! -b "${MNT_FS_NAME}" ] && [ $loopCount -lt 3 ] ;
	do
		 log "log device not present: ${MNT_FS_NAME} waiting.."
		 udevadm settle --timeout=10
		 sleep 10
		 loopCount=$(($loopCount + 1))
	done

	if [ -b "${MNT_FS_NAME}" ] ; then
		if ! mount -w -t ${MNT_FS_TYPE} ${MNT_FS_NAME} ${MNT_DIR} >>"$LOG_TO" 2>&1  ; then
		  log "failed to mount device using  mount -w -t ${MNT_FS_TYPE} ${MNT_FS_NAME} ${MNT_DIR}"
			return 1
		else
			log "mounted device ${MNT_FS_NAME} on ${MNT_DIR}"
			return 0
	  fi
	else
		log "device not present: ${MNT_FS_NAME}"
		return 1
	fi
}
