#!/bin/bash

set -e

SCRIPT_NAME="std-backup"
LOG_DEBUG=FALSE
DEBUG_FUNCTS="add_backup_item match_item match_volume parse_backup_def"

function color {
  if [ -n "$1" ] ; then
    YELLOW='\033[1;33m'
    BROWN='\033[0;33m'
    GREEN='\033[0;32m'
    RED='\033[0;31m'
    NC='\033[0m' # No Color
  else
    YELLOW=
    BROWN=
    GREEN=
    RED=
    NC=
  fi
}

function inform {
    printf "${GREEN}[%s %s] INFO:${NC} %s\n" "$(date +%T)" "${SCRIPT_NAME}" "${1}"
}

function warn {
    printf " ${YELLOW}[%s %s] WARN:${NC} %s\n" "$(date +%T)" "${SCRIPT_NAME}" "${1}"
}

function debug {
    if [ "$LOG_DEBUG" == "TRUE" ] && listContains "$DEBUG_FUNCTS" "${1}" ; then
      printf "${BROWN}[%s %s] DEBUG:${NC} %s: %s\n" "$(date +%T)" "${SCRIPT_NAME}" "${1}" "${2}"
    fi
}

function simulate {
    printf "${GREEN}[%s %s] INFO:${NC}  %s\n" "$(date +%T)" "${SCRIPT_NAME}" "${1}"
}

function clean {
  if [ -n "${TEMP_DIR}" ] && [ -d "${TEMP_DIR}" ] ; then
    rm -rf "${TEMP_DIR}"
  fi
}

##########################################
# fail : try to resotore & reboot
##########################################

function fail {
    printf "${RED}[%s %s] ERROR:${NC} %s\n" "$(date +%T)" "${SCRIPT_NAME}" "${1}"
    clean
    exit -1
}

##########################################
# check if list contains string
##########################################
# careful how you call it, should be
# eg.: listContains "$SUPPORTED_OSTYPES" $OSTYPE
function listContains {
    for curr in $1
    do
        if [ "$2" == "$curr" ]; then
            return 0
        fi
    done
    return 1
}

##########################################
# add item to default backup
##########################################
function add_backup_item {
  local volume="$1" source="$2" target="$3"  filter="$4" volDir infoTgt
  inform "prepare backup volume: '$volume', source: '$source', target: '$target', filter: '$filter'"

  volDir="${TEMP_DIR}/${volume}"
  if [ -z "$target" ] || [ "$target" == "." ] || [ "$target" == "/" ] ; then
    infoTgt="${volume}"
    target="${volDir}"
  else
    infoTgt="${volume}/${target}"
    target="${volDir}/${target}"
  fi


  mkdir -p "${volDir}" || fail "failed to create volume directory ${volDir}"

  if [ -d "$source" ] ; then
    if [ -n "$filter" ] ; then
      debug add_backup_item  "linking all in '${source}' to '${target}' with filter '${filter}'"
      mkdir -p "${target}"
      while read -r file
      do
        debug add_backup_item  "processsing $file"
        if [[ $file =~ $filter ]] ; then
          # shellcheck disable=SC2086
          inform "linking file '${source}/${file}' -> '${infoTgt}/$(basename $file)'"
          # shellcheck disable=SC2086
          ln -s "${source}/${file}" "${target}/$(basename $file)"
        else
          debug add_backup_item "no match for $file on $filter"
        fi
      done < <(/bin/sh -c "ls -1 \"$source\"")
    else
      inform "linking directory '${source}' -> '${infoTgt}'"
      # debug add_backup_item  "ln -s '$source' '${target}'"
      ln -s "$source" "${target}"
    fi
  else
    if  [[ -f "$source" ]] ; then
      inform "linking file '${source}' -> '${infoTgt}'"
      ln -s "$source" "${target}"
    else
      fail "invalid source: '$source'"
    fi
  fi
}

function unquote {
  if [[ $1 =~ ^\"([^\"]+)\"$ ]] ; then
    # shellcheck disable=SC2086
    echo ${BASH_REMATCH[1]}
  else
    if [[ $1 =~ ^\'([^\']+)\'$ ]] ; then
      # shellcheck disable=SC2086
      echo ${BASH_REMATCH[1]}
    else
    # shellcheck disable=SC2086
      echo ${1}
    fi
  fi
}

function match_item {
  local line="$1"
  debug match_item "state $STATE"
  if [[ $line =~ ^[[:space:]]+-[[:space:]]*item[[:space:]]*:.* ]] ; then
    STATE="source"
    debug match_item ">> state:${STATE}"
  else
    match_volume "$line"
  fi
}

function match_volume {
  local line="$1"
  debug match_volume "state $STATE"
  if [[ $line =~ ^-[[:space:]]*volume:[[:space:]]*(.*)$ ]] ; then
    if [ -n "${BASH_REMATCH[1]}" ] ; then
      STATE="item"
      VNAME=$(unquote "${BASH_REMATCH[1]}")
      debug match_volume "volume=$VNAME"
      debug match_volume ">> state:${STATE}"
    else
      STATE="vname"
      debug match_volume ">> state:${STATE}"
    fi
  fi
}


function parse_backup_def {
  local inputFile source target
  inputFile="$1"
  STATE="volume"

  debug parse_backup_def "inputFile: $inputFile"

  while IFS="" read -r line || [ -n "$line" ]
  do
    if [[ ! $line =~ ^[[:space:]]*\#.* ]] && [[ ! $line =~ ^[[:space:]]*$ ]] ; then
      debug parse_backup_def "in state: ${STATE} got '${line}'"
      case $STATE in
        volume)
          match_volume "$line"
          ;;
        vname)
          if [[ $line =~ ^[[:space:]]+name[[:space:]]*:[[:space:]]*(.*)$ ]] ; then
            STATE="item"
            VNAME=$(unquote "${BASH_REMATCH[1]}")
            debug parse_backup_def "volume=$VNAME"
            debug parse_backup_def ">> state:${STATE}"
          fi
          ;;
        item)
          match_item "$line"
          ;;
        source)
          if [[ $line =~ ^[[:space:]]*-.* ]] ; then
            if [ "$STATE" == "source" ] && [ -n "$source" ] && [ -n "$target" ] ; then
              add_backup_item "$VNAME" "$source" "$target" "$filter"
              source=
              target=
              filter=
            else
              fail "invalid item "
            fi
            match_item "$line"
          else
            if [[ $line =~ ^[[:space:]]+([^:]+)[[:space:]]*:[[:space:]]*(.*)$ ]] ; then
              case "${BASH_REMATCH[1]}" in
                source)
                  source=$(unquote "${BASH_REMATCH[2]}")
                  ;;
                target)
                  target=$(unquote "${BASH_REMATCH[2]}")
                  ;;
                filter)
                  filter=$(unquote "${BASH_REMATCH[2]}")
                  debug parse_backup_def "filter: $filter"
                  ;;
                *)
                  fail "invalid item parameter $line"
                  ;;
              esac
            fi
          fi
          ;;
      esac
    fi
  done < "$inputFile"

  if [ "$STATE" == "source" ] && [ -n "$source" ] ; then
    add_backup_item "$VNAME" "$source" "$target" "$filter"
  fi

}


####################################################################################
####################################################################################
# main : create initramfs & install it
####################################################################################
####################################################################################

color ON

BACKUP_FILE="$1"
BACKUP_DEF="$2"

inform "backup to ${BACKUP_FILE} with definition file ${BACKUP_DEF}"

TEMP_DIR=$(mktemp -d -p ./)

inform "using temporary directory ${TEMP_DIR}"

parse_backup_def "$BACKUP_DEF"

inform "creating backup archive"
tar -hzcf "$BACKUP_FILE" -C "${TEMP_DIR}" --exclude="$BACKUP_FILE" . || fail "failed to create backup file $BACKUP_FILE"

clean
inform "done"
