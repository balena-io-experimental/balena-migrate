#!/bin/bash

set -e


INPUT_IMG=
LOOP_DEV=
MNT_DIR=
TMP_DIR=
GRUB_FILE=
IMG_FILE=
BLOCK_SIZE=512

function fail {
  echo "${1}"
  clean
  exit 1
}

function clean {

  if [ -n "$LOOP_DEV" ] && [ -b "$LOOP_DEV" ] ; then
    # echo "removing $LOOP_DEV"
    umount $LOOP_DEV || true
    losetup -d $LOOP_DEV
    LOOP_DEV=
  fi

  if [ -n "$MNT_DIR" ] && [ -d "$MNT_DIR" ] ; then
    # echo "removing mount point $MNT_DIR"
    rmdir "$MNT_DIR"
  fi

  if [ -n "$TMP_DIR" ] && [ -d "$TMP_DIR" ] ; then
    # echo "removing temporary directory $TMP_DIR"
    rm -rf "$TMP_DIR"
  fi
}

function getCmdArgs {
  cmd=
  for var in "$@"
  do
    if [[ ! $var =~ ^-.*$ ]] ; then
      INPUT_IMG="$var"
      echo "using input file: $INPUT_IMG"
      continue
    fi

    if [[ $var =~ ^--grub=.*$ ]] ; then
      GRUB_FILE=$(expr match "$var" '^--grub=\(.*\)$')
      echo "using grub output file $GRUB_FILE"
      continue
    fi

    if [[ $var =~ ^--img=.*$ ]] ; then
      IMG_FILE=$(expr match "$var" '^--img=\(.*\)$')
      echo "using image output file $IMG_FILE"
      continue
    fi

    fail "unrecognized argument $var"
  done
}



################################################################################
# main
################################################################################

if [[ $EUID -ne 0 ]]; then
  fail "This script must be run as root"
fi

getCmdArgs "$@"

if [ -z "$INPUT_IMG" ] ; then
  fail "USAGE: extract [--grub=<grub output file>] [--img=<image output file>] <image-file>"
fi

if [ ! -f "$INPUT_IMG" ] ; then
  fail "file not found $INPUT_IMG"
fi

if [ -z "$IMG_FILE" ] && [ -z "$GRUB_FILE" ] ; then
  echo "USAGE: extract [--grub=<grub output file>] [--img=<image output file>] <image-file>"
  fail "no output files specified, please use --img and/or --grub options to specify output files"
fi

echo "processing image $INPUT_IMG"

if [[ "$INPUT_IMG" =~ .*\.zip$ ]] ; then
  echo "file appears to be a zip archive, unzipping.."
  TMP_DIR=$(mktemp -d -p ./)
  unzip "$INPUT_IMG" -d "$TMP_DIR" || fail "failed to unzip $INPUT_IMG"
  INPUT_IMG="${TMP_DIR}/$(ls "$TMP_DIR")"
  echo "got ${INPUT_IMG}"
fi

if [[ ! "$INPUT_IMG" =~ ^[^\ ]+\.img$ ]] ; then
  fail "cannot make sense of image file $INPUT_IMG - expecting a single file that ends with .img"
fi

while read line
do

  if [[ $line =~ ^1:[0-9]+s:.* ]] ; then
    bootStart=$(expr match "$line" '^1:\([0-9]\+\)s')
    bootStart=$(($bootStart*$BLOCK_SIZE))
    # echo "got boot partition start offset $bootStart"
    continue
  fi

  if [[ $line =~ ^2:[0-9]+s:.* ]] ; then
    rootStart=$(expr match "$line" '^2:\([0-9]\+\)s')
    rootStart=$(($rootStart*$BLOCK_SIZE))
    # echo "got root partition start offset $rootStart"
    break
  fi
done < <(parted -sm "$INPUT_IMG" unit s print)

MNT_DIR=$(mktemp -d -p ./)

if [ -n "$GRUB_FILE" ] ; then
  # echo "attempting losetup --show -o $bootStart -f $INPUT_IMG"
  LOOP_DEV=$(losetup --show -o $bootStart -f "$INPUT_IMG") || fail "failed to loopmount boot partition"

  echo "boot partition attached to loop device $LOOP_DEV"

  echo "mounting boot"
  mount $LOOP_DEV "$MNT_DIR"

  cp "${MNT_DIR}/grub.cfg_internal" "$GRUB_FILE" || fail "failed to copy grub config"
  echo "copied ${MNT_DIR}/grub.cfg_internal to $GRUB_FILE"

  sleep 1 # otherwise mount dir might still be busy...
  umount "$MNT_DIR" || fail "failed to unmount boot partition"
  losetup -d $LOOP_DEV || fail "failed to unmount loop device"
  LOOP_DEV=
fi

if [ -n "$IMG_FILE" ] ; then
  # echo "attempting losetup --show -o $rootStart -f $INPUT_IMG"
  LOOP_DEV=$(losetup --show -o $rootStart -f "$INPUT_IMG") || fail "failed to loopmount boot partition"

  echo "root-A partition attached to loop device $LOOP_DEV"

  echo "mounting root-A"
  mount $LOOP_DEV "$MNT_DIR"

  cp "${MNT_DIR}/opt/resin-image-genericx86-64.resinos-img" "$IMG_FILE" || fail "failed to copy image file"
  echo "copied ${MNT_DIR}/opt/resin-image-genericx86-64.resinos-img $IMG_FILE"
  sleep 1 # otherwise mount dir might still be busy...

  umount "$MNT_DIR" || fail "failed to unmount root-A partition"
  losetup -d $LOOP_DEV || fail "failed to unmount loop device"
  LOOP_DEV=
fi

clean
