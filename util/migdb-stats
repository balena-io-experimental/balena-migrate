#!/bin/bash
# done

set -o errexit -o pipefail

MIG_DB_DIR=${MIG_DB_DIR="."}

MIG_OUTPUT=${MIG_OUTPUT=stdout}

failDir="${MIG_DB_DIR}/db/fail"
doneDir="${MIG_DB_DIR}/db/done"

SCRIPT_NAME=$(basename "${0}")
SCRIPT_PATH=$(dirname "${0}")

if [ -f "${SCRIPT_PATH}/migdb-common" ] ; then
  #shellcheck source=./migdb-common
  source "${SCRIPT_PATH}/migdb-common"
else
  echo "could not find ${SCRIPT_PATH}/migdb-common" >&2
  exit 1
fi

MIG_LOG_FILE=stderr
logTo "$MIG_LOG_FILE"

function printHelp {
  cat << EOI >&2

  USAGE: migdb-stats [options]
  Analyse migdb log files and write CSV output
  options are:
    --base <db base dir>             - Base directory of db, defaults to ./
    -c | --cfg <migrate-config-file> - Config variables in bash / sh format
		--log-to <log directory>         - Log to file
    -o | --output <output file>      - Write data to file

EOI
return 0
}


function getCmdArgs {
  while [[ $# -gt 0 ]]; do
    local arg="$1"
    case $arg in
      -h|--help)
          printHelp
          exit 0
          ;;
          -c|--cfg)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_CFG="$2"
            inform  "set MIG_CFG=$MIG_CFG"
            shift
            ;;
          -o|--output)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_OUTPUT="$2"
            inform "set MIG_OUTPUT=$MIG_OUTPUT"
            shift
            ;;
          --base)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_DB_DIR="$2"
            inform  "set MIG_DB_DIR=$MIG_DB_DIR"
            shift
            ;;
          --log-to)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_LOG_TO="$2"
            inform "set MIG_LOG_TO=$MIG_LOG_TO"
            shift
            ;;
          *)
            inform "unrecognized argument $1"
            printHelp
            exit 1
            ;;
    esac
    shift
  done
}


#############################################
# main 
#############################################

getCmdArgs "$@"

setLogFile

case "$MIG_OUTPUT" in 
	stdout|"")
		exec 5>&1
		;;
	stderr)
		exec 5>&2
		;;
	*)
    if [ -f "$MIG_OUTPUT" ] ; then  
      rm 	"$MIG_OUTPUT" || fail "cannot remove existing file $MIG_OUTPUT"
    fi  
    exec 5<>"$MIG_OUTPUT"
		;;
esac

inform "scanning ${failDir}" 

echo "id;created;migrated;done;modified;ok;fail;not reached;no success;migrate err;no show;other;status;last-status;dev-id;failmsg" >&5

for  entry in "${failDir}/"*
do 
  if [[ $entry =~ .*/db/fail/fail-(.+)-.{3}$ ]] ; then
	id="${BASH_REMATCH[1]}"
	modified=$(stat --format=%y "${entry}")
	STATUS=
	DEVICE_ID=
	FAIL_MSG=
	if ! grep -E 'FAIL_MSG=\".*\"' "${entry}" > /dev/null ; then 
	  tmpFile=$(mktemp)
     	  sed 's/^FAIL_MSG=\(.*\)$/FAIL_MSG="\1"/g' "${entry}" > "${tmpFile}"

		# shellcheck disable=SC1090		 
			source "${tmpFile}"
			rm "${tmpFile}"
  	else
			# shellcheck disable=SC1090		 
			source "${entry}"
  	fi	
	if [ "${UNIT_ID}" != "${id}" ] ; then 
	  warn "invalid file ${entry} skipping "
	fi
	
	notReached=0
	migrateErr=0
	migrateExec=0
	noShow=0
	other=0
	
	if [[ $FAIL_MSG =~ failed\ [0-9]+\ attempts\ to\ transmit\ configuration.* ]] ; then 
	  notReached=1
        else  
	  if [[ $FAIL_MSG =~ cannot\ find\ success\ message.* ]] ; then
	     migrateErr=1
	  else 
	    if [[ $FAIL_MSG =~ .*Device\ has\ not\ shown\ up\ in\ balena-cloud.* ]] ; then 
		noShow=1
	    else
		if [[ $FAIL_MSG =~ failed\ to\ execute\ migrate\ script.* ]] ; then
   		  migrateExec=1
		else     	
		  other=1
	        fi	
	    fi	    
          fi		  
  	fi

  
	echo "\"${id}\";${CREATE_ISOTS};${MIGRATED_ISOTS};${DONE_ISOTS};${modified};0;1;${notReached};${migrateErr};${migrateExec};${noShow};${other};\"FAILED\";\"${STATUS}\";${DEVICE_ID};\"${FAIL_MSG}\"" >&5
  fi 
done


for  entry in "${doneDir}/"*
do
  if [[ $entry =~ .*/db/done/unit-(.+)-.{3}$ ]] ; then
        id="${BASH_REMATCH[1]}"
        modified=$(stat --format=%y "${entry}")
        STATUS=
        DEVICE_ID=
        FAIL_MSG=
        if ! grep -E 'FAIL_MSG=\".*\"' "${entry}" > /dev/null ; then
          tmpFile=$(mktemp)
          sed 's/^FAIL_MSG=\(.*\)$/FAIL_MSG="\1"/g' "${entry}" > "${tmpFile}"
          source "${tmpFile}"
          rm "${tmpFile}"
        else
          source "${entry}"
        fi
        if [ "${UNIT_ID}" != "${id}" ] ; then
          warn "invalid file ${entry} skipping " >2
        fi
        echo "\"${id}\";${CREATE_ISOTS};${MIGRATED_ISOTS};${DONE_ISOTS};${modified};1;0;0;0;0;0;0;\"${STATUS}\";\"MIGRATED\";${DEVICE_ID};\"${FAIL_MSG}\"" >&5
  fi
done


