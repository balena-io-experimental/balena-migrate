#!/bin/bash
# done

set -o errexit -o pipefail

DEBUG_FUNCTS="process"
LOG_DEBUG=FALSE

ST_DONE="DONE"
ST_LOST="LOST"
ST_BCKUP="BCKUP"
ST_SPACE="NO_SPACE"
ST_RO="READ_ONLY"
ST_CONN="NO_CONN"
ST_TIMEOUT="TIMEOUT"
ST_OTHER="OTHER"

MIG_DB_DIR=${MIG_DB_DIR="."}

MIG_OUTPUT=${MIG_OUTPUT=stdout}

failDir="${MIG_DB_DIR}/db/fail"
doneDir="${MIG_DB_DIR}/db/done"

SCRIPT_NAME=$(basename "${0}")
SCRIPT_PATH=$(dirname "${0}")
COLOR=ON

DEL=';'
RPL=','


if [ -f "${SCRIPT_PATH}/migdb-common" ] ; then
  #shellcheck source=./migdb-common
  source "${SCRIPT_PATH}/migdb-common"
else
  echo "could not find ${SCRIPT_PATH}/migdb-common" >&2
  exit 1
fi

MIG_LOG_TO="stderr"
logTo "$MIG_LOG_TO"

declare -A UNITS

function printHelp {
  cat << EOI >&2

  USAGE: migdb-stats [options]
  Analyse migdb log files and write CSV output
  options are:
    --base <db base dir>             - Base directory of db, defaults to ./
    -c | --cfg <migrate-config-file> - Config variables in bash / sh format
		--log-to <log directory>         - Log to file
    -o | --output <output file>      - Write data to file

EOI
return 0
}

function cleanse {
    local cleansed=    
    cleansed=$(echo "$1" | tr "$DEL" "$RPL")
    if [[ $cleansed =~ ^\"(.*)\"$ ]] ; then 
      cleansed="${BASH_REMATCH[1]}"
    fi
    echo "$cleansed"
}

function epoch2IsoTs {
  date -d "@$1" -u +"%Y-%m-%dT%H:%M:%SZ"
} 


function getCmdArgs {
  while [[ $# -gt 0 ]]; do
    local arg="$1"
    case $arg in
      -h|--help)
          printHelp
          exit 0
          ;;
          -c|--cfg)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_CFG="$2"
            inform  "set MIG_CFG=$MIG_CFG"
            shift
            ;;
          -o|--output)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_OUTPUT="$2"
            inform "set MIG_OUTPUT=$MIG_OUTPUT"
            shift
            ;;
          --base)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_DB_DIR="$2"
            inform  "set MIG_DB_DIR=$MIG_DB_DIR"
            shift
            ;;
          --log-to)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_LOG_TO="$2"
            inform "set MIG_LOG_TO=$MIG_LOG_TO"
            shift
            ;;
          *)
            inform "unrecognized argument $1"
            printHelp
            exit 1
            ;;
    esac
    shift
  done
}

function process {
  local file id tmp
  file=$(readlink -e "$1")

  debug process "processing file ${file}"
  if [[ ! $file =~ .*/db/(fail/fail|done/unit)-(.+)-.{3}$ ]] ; then
    debug process "file rejected ${file}"
    return 1
  fi

  id="${BASH_REMATCH[2]}"

  STATUS=  
  STATUS_TS=
  CREATE_TS=
  DEVICE_ID=
	FAIL_MSG=
  UNIT_ID=
  MIG_CONN_RETRIES=0
  UNIT_OUTPUT_LOG=

	tmpFile=$(mktemp)
  # make sure all strings are quoted
  sed 's/\([^=]\+=\)\([^"].*[^"]\)$/\1\"\2\"/g' "${file}" > "${tmpFile}"

  # shellcheck disable=SC1090		 
  source "${tmpFile}" || fail "failed to source $file"
  rm "${tmpFile}"

  if [ -z "$STATUS_TS" ] ; then 
    STATUS_TS=$(stat --format=%Y "${file}")
  fi 

  debug process "<${UNIT_ID}> == <${id}>"

	if [ "${UNIT_ID}" != "${id}" ] ; then 
	  warn "invalid file ${entry} skipping "
    return 1
	fi

  tmp=${UNITS["$id"]}
  if [ -n "$tmp" ] ; then     
    IFS=$DEL read -r uState uMigAtmpt uConnAtmpt uCreateTs uStatusTs uMigTs uDeviceId uFile uFailMsg uComment <<< "$tmp"
    warn "${UNIT_ID}, found duplicate unit file"
    warn "${UNIT_ID}, last state ${uState}@$(epoch2IsoTs $uStatusTs) in ${uFile} "
    warn "${UNIT_ID}, this state ${STATUS}@$(epoch2IsoTs $STATUS_TS) in ${file}"

    uMigAtmpt=$((uMigAtmpt+1))

    if [[ $uCreateTs -gt $CREATE_TS ]] ;then 
      UNITS["$id"]="${uState}${DEL}${uMigAtmpt}${DEL}${uConnAtmpt}${DEL}${uCreateTs}${DEL}${uStatusTs}${DEL}${uMigTs}${DEL}${uDeviceId}${DEL}${file}${DEL}${cFailMsg}${DEL}${uComment}"
      return 0
    else
      if [[ "${uState}" == "${ST_DONE}" ]] ; then       
        uComment="further migrate attempt found on unit in state ${ST_DONE}"
        UNITS["$id"]="${uState}${DEL}${uMigAtmpt}${DEL}${uConnAtmpt}${DEL}${uCreateTs}${DEL}${uStatusTs}${DEL}${uMigTs}${DEL}${uDeviceId}${DEL}${file}${DEL}${cFailMsg}${DEL}${uComment}"
        return 0
      fi  
    fi  
  else 
    debug process "${UNIT_ID}, adding unit"
  fi  

  while true ;
  do
    if [ ! -f "${UNIT_OUTPUT_LOG}" ] ; then 
      if [[ ${UNIT_OUTPUT_LOG} =~ .*(/db/log/log-.*)$ ]] ; then 
        UNIT_OUTPUT_LOG="${MIG_DB_DIR}${BASH_REMATCH[1]}"
      fi
      if [ ! -f "${UNIT_OUTPUT_LOG}" ] ; then 
        fail "unit file not found ${UNIT_OUTPUT_LOG}"
      fi
    fi

    migTsStr=$(grep " ---- calling migrate" "${UNIT_OUTPUT_LOG}") || true
    if  [[ $migTsStr =~ ^\[([^\]]+)\] ]]; then 
      uMigTs=$(date -d "${BASH_REMATCH[1]}" -u +%s)
    else 
      uMigTs=0
    fi

    if [[ "$STATUS" == "DONE" ]] ; then 
      uState="$ST_DONE"
      break;
    fi    

    if grep "migration successful" "${UNIT_OUTPUT_LOG}" >/dev/null 2>&1 ; then
      uState="$ST_LOST"
      break;
    fi

    if grep -E "ERROR:.*backup script" "${UNIT_OUTPUT_LOG}" >/dev/null 2>&1 ; then
      uState="$ST_BCKUP"
      break;
    fi

    if grep "Read-only file system" "${UNIT_OUTPUT_LOG}" >/dev/null 2>&1 ; then 
    	uState="$ST_RO"
      break
    fi

    if grep -E "No space left on device" "${UNIT_OUTPUT_LOG}" >/dev/null 2>&1 ; then 
    	uState="$ST_SPACE"
      break
    fi

    if grep -E "^./migdb-common: line [0-9]+: [0-9]+ Killed" "${UNIT_OUTPUT_LOG}}" >/dev/null 2>&1 ; then
        uState="$ST_TIMEOUT"
        break
    fi

    if grep -E "ssh:.*Connection refused" "${UNIT_OUTPUT_LOG}" >/dev/null 2>&1 ; then 
    	uState="$ST_CONN"
      break
    fi

    uState="$ST_OTHER"
    break;
  done

  FAIL_MSG=$(cleanse "$FAIL_MSG") 

  UNITS["$id"]="${uState}${DEL}1${DEL}${MIG_CONN_RETRIES}${DEL}${CREATE_TS}${DEL}${STATUS_TS}${DEL}${uMigTs}${DEL}${DEVICE_ID}${DEL}${file}${DEL}${FAIL_MSG}${DEL}"
}


#############################################
# main 
#############################################

getCmdArgs "$@"

setLogFile

if [ -n "$COLOR" ] ; then
  color "$COLOR"
else
  color OFF
fi

case "$MIG_OUTPUT" in 
	stdout|"")
		exec 5>&1
		;;
	stderr)
		exec 5>&2
		;;
	*)
    if [ -f "$MIG_OUTPUT" ] ; then  
      rm 	"$MIG_OUTPUT" || fail "cannot remove existing file $MIG_OUTPUT"
    fi  
    exec 5<>"$MIG_OUTPUT"
		;;
esac

inform "scanning ${doneDir}" 

for  entry in "${doneDir}/"*
do
  process "$entry" || true
done

inform "scanning ${failDir}" 

for  entry in "${failDir}/"*
do 
  process "$entry" || true
done

doneCount=0
lostCount=0
bckupCount=0
spaceCount=0
roCount=0
connCount=0
tmoutCount=0
otherCount=0

echo "\"id\"${DEL}\"state\"${DEL}\"mig.att.\"${DEL}\"conn.att.\"${DEL}\"created\"${DEL}\"last\"${DEL}\"mig.offs.\"${DEL}\"duration\"${DEL}\"balena id\"${DEL}\"fail Msg\"${DEL}\"comment\"" >&5
for id in "${!UNITS[@]}" 
do 
  IFS=$DEL read -r  uState uMigAtmpt uConnAtmpt uCreateTs uStatusTs uMigTs uDeviceId uFile uFailMsg uComment <<< "${UNITS[${id}]}" 

  case "${uState}" in 
    "$ST_DONE")
      doneCount=$((doneCount+1))
      ;;
    "$ST_LOST")
      lostCount=$((lostCount+1))
      ;;
    "$ST_BCKUP")
      bckupCount=$((bckupCount+1))
      ;;
    "$ST_SPACE")
      spaceCount=$((spaceCount+1))
      ;;
    "$ST_RO")
      roCount=$((roCount+1))
      ;;
    "$ST_CONN")
      connCount=$((connCount+1))
      ;;
    "$ST_TIMEOUT")
      tmoutCount=$((connCount+1))
      ;;

    *)
      otherCount=$((otherCount+1))
      ;;
  esac
  
  uConnAtmpt=$((uConnAtmpt+1))
  outStr="${id}${DEL}${uState}${DEL}${uMigAtmpt}${DEL}${uConnAtmpt}${DEL}"
  tsCreate=
  if [ -n "$uCreateTs" ] ; then 
    tsCreate=$(date -d @${uCreateTs} -u --rfc-3339=seconds)  || true
  fi

  if [ -n "$uCreateTs" ] ; then 
    tsStatus=$(date -d @${uStatusTs} -u --rfc-3339=seconds) || true
    dur=$((uStatusTs-uCreateTs))
  fi  

  if [ -n "$uMigTs" ] && [ "$uMigTs" -ne 0 ] ; then 
    txDur=$((uMigTs-uCreateTs))
  else
    txDur="\"-\""
  fi  

  outStr="${outStr}${tsCreate}${DEL}${tsStatus}${DEL}${txDur}${DEL}${dur}${DEL}\"${uDeviceId}\"${DEL}\"${uFailMsg}\"${DEL}\"${uComment}\""

  echo "$outStr" >&5
done

inform "counts: "
echo "\"counts:\"" >&5
inform "done:               ${doneCount}"
echo "\"done:\"${DEL}${doneCount}" >&5
inform "lost:               ${lostCount}"
echo "\"lost:\"${DEL}${lostCount}" >&5
inform "connection refused: ${connCount}"
echo "\"connection refused:\"${DEL}${connCount}" >&5
inform "no space on device: ${spaceCount}"
echo "\"no space on device:\"${DEL}${spaceCount}" >&5
inform "read only device:   ${roCount}"
echo "\"read only device:\"${DEL}${roCount}" >&5
inform "backup failure:     ${bckupCount}"
echo "\"backup failure:\"${DEL}${bckupCount}" >&5
inform "transmit timeout:   ${tmoutCount}"
echo "\"transmit timeout:\"${DEL}${tmoutCount}" >&5
inform "other:              ${otherCount}"
echo "\"other:\"${DEL}${otherCount}" >&5
