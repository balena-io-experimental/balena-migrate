#!/bin/bash
# done

set -o errexit -o pipefail

DEBUG_FUNCTS="process"
LOG_DEBUG=FALSE


MIG_DB_DIR=${MIG_DB_DIR="."}

MIG_OUTPUT=${MIG_OUTPUT=stdout}

failDir="${MIG_DB_DIR}/db/fail"
doneDir="${MIG_DB_DIR}/db/done"

SCRIPT_NAME=$(basename "${0}")
SCRIPT_PATH=$(dirname "${0}")

if [ -f "${SCRIPT_PATH}/migdb-common" ] ; then
  #shellcheck source=./migdb-common
  source "${SCRIPT_PATH}/migdb-common"
else
  echo "could not find ${SCRIPT_PATH}/migdb-common" >&2
  exit 1
fi

MIG_LOG_TO="stderr"
logTo "$MIG_LOG_TO"

function printHelp {
  cat << EOI >&2

  USAGE: migdb-stats [options]
  Analyse migdb log files and write CSV output
  options are:
    --base <db base dir>             - Base directory of db, defaults to ./
    -c | --cfg <migrate-config-file> - Config variables in bash / sh format
		--log-to <log directory>         - Log to file
    -o | --output <output file>      - Write data to file

EOI
return 0
}


function getCmdArgs {
  while [[ $# -gt 0 ]]; do
    local arg="$1"
    case $arg in
      -h|--help)
          printHelp
          exit 0
          ;;
          -c|--cfg)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_CFG="$2"
            inform  "set MIG_CFG=$MIG_CFG"
            shift
            ;;
          -o|--output)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_OUTPUT="$2"
            inform "set MIG_OUTPUT=$MIG_OUTPUT"
            shift
            ;;
          --base)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_DB_DIR="$2"
            inform  "set MIG_DB_DIR=$MIG_DB_DIR"
            shift
            ;;
          --log-to)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_LOG_TO="$2"
            inform "set MIG_LOG_TO=$MIG_LOG_TO"
            shift
            ;;
          *)
            inform "unrecognized argument $1"
            printHelp
            exit 1
            ;;
    esac
    shift
  done
}

function process {
  local file fail ok modified id duplicate
  file=$1

  debug process "processing file ${file}"
  if [[ ! $file =~ .*/db/(done/unit|fail/fail)-(.+)-.{3}$ ]] ; then
    debug process "file rejected ${file}"
    return 1
  fi

  id="${BASH_REMATCH[2]}"

  modified=$(stat --format=%y "${file}")
  STATUS=
	DEVICE_ID=
	FAIL_MSG=
  
	tmpFile=$(mktemp)
  sed 's/\([^=]\+=\)\([^"].*[^"]\)$/\1\"\2\"/g' "${file}" > "${tmpFile}"

  # shellcheck disable=SC1090		 
  source "${tmpFile}" || fail "failed to source $file"

  debug process "<${UNIT_ID}> == <${id}>"

	if [ "${UNIT_ID}" != "${id}" ] ; then 
	  warn "invalid file ${entry} skipping "
    return 1
	fi

  if [[ ${UNIT_IDS[@]} =~ ${id} ]] ; then 
    duplicate=1
  else
    duplicate=0
    UNIT_IDS+=(${id})
  fi

  if [ "${BASH_REMATCH[1]}" == "fail" ] ; then 
    fail=1
    ok=0    
  else   
    fail=0
    ok=1
  fi

  # cat "$tmpFile" >&2
  rm "${tmpFile}"

  local migDur=0
  if [ -n "$CREATE_TS" ] && [ -n "$STATUS_TS" ] ; then 
    migDur=$((STATUS_TS-CREATE_TS))    
  fi
  
	notReached=0
	migrateErr=0
	migrateExec=0
	noShow=0
	other=0

  if [ "$fail" == "1" ] ; then 
    if [[ $FAIL_MSG =~ failed\ [0-9]+\ attempts\ to\ transmit\ configuration.* ]] ; then 
      notReached=1
          else  
      if [[ $FAIL_MSG =~ cannot\ find\ success\ message.* ]] ; then
        migrateErr=1
      else 
        if [[ $FAIL_MSG =~ .*Device\ has\ not\ shown\ up\ in\ balena-cloud.* ]] ; then 
          noShow=1
        else
          if [[ $FAIL_MSG =~ failed\ to\ execute\ migrate\ script.* ]] ; then
            migrateExec=1
          else     	
            other=1
          fi	
        fi	    
      fi		  
    fi
  fi

  echo "\"${UNIT_ID}\";$migDur;${CREATE_ISOTS};${MIGRATED_ISOTS};${DONE_ISOTS};${modified};$ok;$fail;${notReached};${migrateErr};${migrateExec};${noShow};${other};\"${STATUS}\";\"${DEVICE_ID}\";\"${FAIL_MSG}\";${MIG_CONN_RETRIES};\"${TRANSFER_FAIL_MSG}\";${duplicate}" >&5
}


#############################################
# main 
#############################################

getCmdArgs "$@"

setLogFile

UNIT_IDS=()

case "$MIG_OUTPUT" in 
	stdout|"")
		exec 5>&1
		;;
	stderr)
		exec 5>&2
		;;
	*)
    if [ -f "$MIG_OUTPUT" ] ; then  
      rm 	"$MIG_OUTPUT" || fail "cannot remove existing file $MIG_OUTPUT"
    fi  
    exec 5<>"$MIG_OUTPUT"
		;;
esac

echo "id;dur;created;migrated;done;modified;ok;fail;not reached;no success;migrate err;no show;other;last-status;dev-id;failmsg;retries;txFailMsg;duplicate" >&5

inform "scanning ${failDir}" 

for  entry in "${failDir}/"*
do 
  process "$entry" || true
done

inform "scanning ${doneDir}" 

for  entry in "${doneDir}/"*
do
  process "$entry" || true
done

