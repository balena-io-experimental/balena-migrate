#!/bin/bash

if [ -z "$MIG_DB_DIR" ] ; then
  MIG_DB_DIR=.
fi

COLOR=ON

# MIG_CFG_ARCHIVE= # "./test/mig_x86_64.tgz"
TGT_DIR="migrate"

DEBUG_FUNCTS="main process"
LOG_DEBUG=TRUE


SCRIPT_NAME="migdb-migrate"
SLEEP_DURATION=5

SCRIPT_PATH=$(dirname "${0}")
# shellcheck source=/home/thomas/develop/balena.io/migrate/util/migdb-common
source "${SCRIPT_PATH}/migdb-common"

function printHelp {
  cat << EOI

  USAGE: migdb-migrate [options]
  options are:
    --app <balena-application> - balena application to register with
    --balena-ver
    --base <db base dir> - base directory of order db, defaults to ./
    -c | --cfg <migrate-config-file> - config variables in bash / sh format
    --cfg-dir <migratecfg dir> - migrate config directory
    --cfg-tgz <migratecfg archive> - gzipped tar archive of migratecfg directory
    --color <ON/OFF> - Anything other than ON switches colored output off
    --host <ssh-host> - default ssh host
    --min-age <age in seconds> - minimum age of unit file before processing
    --passwd <ssh password> - default ssh password
    -p | --port <ssh port> - default ssh port
    --ssh-opts <ssh-opts> - default ssh options
    -u | --user <ssh user> - default ssh user

    Options can  provided in config file (via --cfg) or as ENV variables, see-cEADMmn"

EOI
return 0
}


function getCmdArgs {
  while [[ $# -gt 0 ]]; do
    local arg="$1"
    case $arg in
      -h|--help)
          printHelp
          exit 0
          ;;
          -c|--cfg)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_CFG="$2"
            inform  "set MIG_CFG=$MIG_CFG"
            shift
            ;;
          --ssh-opts)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_DEF_SSH_OPTS="$2"
            inform  "set MIG_DEF_SSH_OPTS=$MIG_DEF_SSH_OPTS"
            shift
            ;;
          --logTo)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_LOG_TO="$2"
            inform "set MIG_LOG_TO=$MIG_LOG_TO"
            shift
            ;;
          --base)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_DB_DIR="$2"
            inform  "set MIG_DB_DIR=$MIG_DB_DIR"
            shift
            ;;
          --color)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            COLOR="$2"
            inform  "set COLOR=$COLOR"
            shift
            ;;
          -p|--port)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_SSH_PORT="$2"
            inform  "set MIG_SSH_PORT=$MIG_SSH_PORT"
            shift
            ;;
          --host)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_SSH_HOST="$2"
            inform "set MIG_SSH_HOST=$MIG_SSH_HOST"
            shift
            ;;
          -u|--user)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_SSH_USER="$2"
            inform  "set MIG_SSH_USER=$MIG_SSH_USER"
            shift
            ;;
          --passwd)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_SSH_PASSWD="$2"
            inform "set MIG_SSH_PASSWD=$MIG_SSH_PASSWD"
            shift
            ;;
          --cfg-dir)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_CFG_DIR="$2"
            inform "set MIG_CFG_DIR=$MIG_CFG_DIR"
            shift
            ;;
          --cfg-tgz)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_CFG_ARCHIVE="$2"
            inform "set MIG_CFG_DIR=$MIG_CFG_ARCHIVE"
            shift
            ;;
          --min-age)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_MIN_AGE="$2"
            inform "set MIG_MIN_AGE=$MIG_MIN_AGE"
            shift
            ;;
          --app)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_APP="$2"
            inform  "set MIG_APP=$MIG_APP"
            shift
            ;;
          --balena-ver)
            if [ -z "$2" ]; then
              fail "\"$1\" argument needs a value."
            fi
            MIG_BALENA_VER="$2"
            inform "set MIG_BALENA_VER=$MIG_BALENA_VER"
            shift
            ;;
          *)
            inform "unrecognized argument $1"
            printHelp
            exit 1
            ;;
    esac
    shift
  done
}

################################################################################
# process unit file
################################################################################

function process {
  debug process "with $UNIT_FILE"

  # shellcheck disable=SC1090
  source "$UNIT_FILE"

  if [ -n "$OUTPUT_LOG" ] && [ -f "$OUTPUT_LOG" ] ; then
    rm "$OUTPUT_LOG"
  fi

  if [ -n "$MIG_DEF_SSH_OPTS" ] ; then
    MIG_SSH_OPTS="${MIG_SSH_OPTS} ${MIG_DEF_SSH_OPTS}"
  fi

  # shellcheck disable=SC2153
  OUTPUT_LOG=$(mktemp -p ${LOG_DIR} "s1-${UNIT_ID}-XXX")

  #if [ -z "$PORT" ] ; then
  #  PORT=22
  #fi

  if [ -n "$MIG_SSH_PASSWD" ] ; then
    PASSWD_PRESENT="present"
  else
    PASSWD_PRESENT="none"
  fi

  local now age
  now=$(date +%s)
  age=$((now-CREATE_TS))

  inform "port=$MIG_SSH_PORT, uuid=${UUID}, user=${MIG_SSH_USER}, status:${STATUS}, passwd=${PASSWD_PRESENT} age=${age} sec."

  # shellcheck disable=SC2086
  if [ -n "$MIG_MIN_AGE" ] && [ ${age} -lt ${MIG_MIN_AGE} ] ; then
    inform "giving device more time to connect"
    moveFile "$UNIT_FILE" "${UNIT_DIR}/unit-${UNIT_ID}" || fail "failed to restore order file"
    sleep 5
    return 0
  fi

  if [ -n "$MIG_CFG_ARCHIVE" ] && [ -f "$MIG_CFG_ARCHIVE" ] ; then
    if ! sendTarCfg "$MIG_CFG_ARCHIVE" "$TGT_DIR" ; then
      orderFailed "$UNIT_ID" "$UNIT_FILE" "failed to transmit configuration in ${CFG_ARCHIVE} to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}"
      return 0
    fi
  else
    if [ -n "$MIG_CFG_DIR" ] && [ -d "$MIG_CFG_DIR" ] ; then
      if ! sendCfgDir "$MIG_CFG_DIR" "$TGT_DIR" ; then
        orderFailed "$UNIT_ID" "$UNIT_FILE" "failed to transmit configuration in ${MIG_CFG_DIR} to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}"
        return 0
      fi
    fi
  fi

  if [ -z "$MIG_SSH_HOST" ] ; then
        orderFailed "$UNIT_ID" "$UNIT_FILE" "no ssh host given, please specify MIG_SSH_HOST / --host"
        return 0
  fi

  if [ -z "$MIG_APP" ] ; then
        orderFailed "$UNIT_ID" "$UNIT_FILE" "no application given, please specify MIG_APP / --app"
        return 0
  fi



  inform "registering device with MIG_APP=$MIG_APP"
  local tmpStr
  tmpStr=$(balena device register "$MIG_APP" 2>"${OUTPUT_LOG}")
  # shellcheck disable=SC2181
  if [ $? -ne 0 ] ; then
    orderFailed "$UNIT_ID" "$UNIT_FILE" "failed to register device to MIG_APP=$MIG_APP"
    return 0
  fi

  if [[ $tmpStr =~ ^[^:]+:\ *([^\ ]+)$ ]] ; then
    UUID="${BASH_REMATCH[1]}"
  fi

  if [ -z "$UUID" ] ; then
    orderFailed "$UNIT_ID" "$UNIT_FILE" "no UUID found in register response <$tmpStr>"
    return 0
  fi

  inform "using application UUID=$UUID"

  # balena config generate --device 0e203b4 --version 2.26.0 --output config.json --network ethernet --appUpdatePollInterval 10


  local cfgFile
  cfgFile=$(mktemp -p "${TMP_DIR}" "s1-config-XXX")
  inform "generating device config file in $cfgFile"
  if ! balena config generate --device "$UUID" --version "$MIG_BALENA_VER" --output "$cfgFile" --network ethernet --appUpdatePollInterval 10 > "$OUTPUT_LOG" 2>&1 ; then
    orderFailed "$UNIT_ID" "$UNIT_FILE" "failed to create config using <balena config generate --device $UUID --version $MIG_BALENA_VER --output $cfgFile --network ethernet --appUpdatePollInterval 10>"
    return 0
  fi

  if ! grep "\"uuid\":\"$UUID\"" "$cfgFile" > "$OUTPUT_LOG" 2>&1 ; then
    orderFailed "$UNIT_ID" "$UNIT_FILE" "cannot find UUID=$UUID in $cfgFile"
    return 0
    fail ""
  fi

  inform "device config file appears valid, copying to $TGT_DIR/balena-migrate-config.json on ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}"

  local sshCmd
  sshCmd=$(mkSshCmd "$MIG_SSH_HOST" "$MIG_SSH_USER" "$MIG_SSH_PORT" "$MIG_SSH_PASSWD")

  if ! sendFile "$cfgFile"  "$TGT_DIR/balena-migrate-config.json" ; then
    orderFailed "$UNIT_ID" "$UNIT_FILE" "failed to transmit generated config file to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}"
    rm "$cfgFile"
    return 0
  else
    rm "$cfgFile"
  fi

  inform "setting variable MIGRATE_SEMAPHORE to 'balena-migrated' on device UUID=$UUID"
  if  ! balena env add MIGRATE_SEMAPHORE balena-migrated --device "$UUID" 2>&1 ; then
      orderFailed "$UNIT_ID" "$UNIT_FILE" "failed to set variable MIGRATE_SEMAPHORE to 'balena-migrated' on device UUID=$UUID"
      return 0
  fi

  local remoteCmd=
  if [ -n "$TGT_DIR" ] && [ "$TGT_DIR" != "./" ] && [ "$TGT_DIR" != "." ] ; then
    remoteCmd="cd '$TGT_DIR' && "
  fi
  # TODO: sudo needed ?
  remoteCmd="${remoteCmd} sudo ./balena-migrate --balena-cfg balena-migrate-config.json"
  cmd="$sshCmd \"$remoteCmd\""

  debug process "attempting </bin/bash -c ${cmd}>"
  truncate -s 0 "$OUTPUT_LOG"
  if /bin/bash -c "$cmd" 2>&1 | tee "$OUTPUT_LOG" ; then
    local successMsg
    successMsg=$(grep "^.*\[.*balena-stage1\] INFO:.*\+\s\+migration successful,.*" "$OUTPUT_LOG")
    if  [ -n "$successMsg" ] ; then
      if [[ "$successMsg" =~ .*please\ reboot\ system.* ]] ; then
        if ! "$sshCmd \"sudo reboot\"" >> "$OUTPUT_LOG" 2>&1 ; then
          orderFailed "$UNIT_ID" "$UNIT_FILE" "failed reboot on ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}"
          return 0
        fi
      fi

      sed -i 's/^\(STATUS=\).*$/\1MIGRATED/' "${UNIT_FILE}" || fail "failed to update status on ${UNIT_FILE}"

      now=$(date +%s)

      {
      echo "STATUS_TS=$now"
      echo "DUE_TS=$((now+180))"
      echo "DEVICE_ID=$UUID"
      }  >> "$UNIT_FILE"

      echo "MIGRATE_S1_LOG=\"$OUTPUT_LOG\"" >> "$UNIT_FILE"
      OUTPUT_LOG=

      moveFile "$UNIT_FILE" "${DONE_DIR}/O${UNIT_ID}" || fail "failed to move ${UNIT_FILE} to ${DONE_DIR}/unit-${UNIT_ID}"
    else
      orderFailed "$UNIT_ID" "$UNIT_FILE" "failed run migrate cmd on ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}"
      return 0
    fi
  else
    orderFailed "$UNIT_ID" "$UNIT_FILE" "failed run migrate cmd on ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}"
    return 0
  fi

  sleep 3
  if [ -f "$UNIT_FILE" ] ; then
    rm "$UNIT_FILE"
  fi
}

################################################################################
# main
################################################################################

color ON

getCmdArgs "$@"

if [ -n "$MIG_CFG" ] && [ -f "$MIG_CFG" ] ; then
  inform "loading config from $MIG_CFG"
  # shellcheck disable=SC1090
  source "$MIG_CFG"
fi

if [ -n "$MIG_LOG_TO" ] ; then
  if [ ! -f "$MIG_LOG_TO" ] ; then
    touch "$MIG_LOG_TO" || fail "unable to write ot log file $MIG_LOG_TO"
  fi

  # Open STDOUT as $LOG_FILE file for read and write.
  exec 1>>"$MIG_LOG_TO" 2>&1
  # Redirect STDERR to STDOUT
fi

inform "started"

checkInit

debug main "MIG_DB_DIR=$MIG_DB_DIR"

if [ -z "$MIG_CFG_ARCHIVE" ] || [ ! -f "$MIG_CFG_ARCHIVE" ] ; then
    if [ -z "$MIG_CFG_DIR" ] || [ ! -d "$MIG_CFG_DIR" ] ; then
        fail "no migrate config given, please specify MIG_CFG_DIR / --cfg-dir or MIG_CFG_ARCHIVE / --cfg-archive"
    fi
fi

while true ; do
  debug "main" "attempting to get an order"
  UNIT_FILE=$(mktemp -p "$TMP_DIR" "s1-proc-XXX")
  # debug main "UNIT_FILE=$UNIT_FILE"
  if getRandFile "$UNIT_DIR" "$UNIT_FILE" ; then
    inform "getOrder success, order file: $UNIT_FILE"
    process
  else
    rm "$UNIT_FILE"
    debug "main" "getOrder returned no order, sleeping for ${SLEEP_DURATION} s"
    sleep $SLEEP_DURATION
  fi
done
