#!/bin/bash

function color {
  if [ "$1" == "ON" ] ; then
    YELLOW='\033[1;33m'
    BROWN='\033[0;33m'
    GREEN='\033[0;32m'
    RED='\033[0;31m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
  else
    YELLOW=
    BROWN=
    GREEN=
    RED=
    BLUE=
    NC=
  fi
}

##########################################
# check if list contains string
##########################################
# careful how you call it, should be
# eg.: listContains "$SUPPORTED_OSTYPES" $OSTYPE
function listContains {
    for curr in $1
    do
        if [ "$2" == "$curr" ]; then
            return 0
        fi
    done
    return 1
}


##########################################
# mkLogName
##########################################

function setLogFile {
  local logFile
  
  if [ -n "$MIG_LOG_TO" ] ; then 
    if [ -f "$MIG_LOG_TO" ] ; then 
      touch "$MIG_LOG_TO" || fail "unable to write to log file $MIG_LOG_TO"
      logTo "$MIG_LOG_TO"
      return;
    else
      if [ -d "$MIG_LOG_TO" ] ; then 
        logFile="${MIG_LOG_TO}/${SCRIPT_NAME}-${$}.log"
        touch "$logFile" || fail "unable to write to log file $logFile"
        logTo "$logFile"
      fi
    fi
  fi  
}

##########################################
# set log fd 
##########################################

function logTo {
  local logFile
  exec 3>&-
    
  if [ -n "$1" ] ; then     
    logFile=$1
  else 
    logFile=stdout
  fi
  
  case "$logFile" in 
    stdout)
      exec 3>&1
      ;;
    stderr)
      exec 3>&2
      ;;
    *)
      exec 3<>"$logFile"
      ;;
  esac
}

##########################################
# success: log info message
##########################################

function success {
  local ts
  ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")  
  printf "${BLUE}[%s %s %s DONE ]:${NC} %s \n" "$ts" "${SCRIPT_NAME}" "$$" "$1" >&3 
}


##########################################
# inform: log info message
##########################################

function inform {    
  local ts
  ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")  
  printf "${GREEN}[%s %s %s INFO ]:${NC} %s \n" "$ts" "${SCRIPT_NAME}" "$$" "$1" >&3
}


##########################################
# warn: log warning message
##########################################

function warn {
  local ts
  ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")  
  printf "${YELLOW}[%s %s %s WARN ]:${NC} %s \n" "$ts" "${SCRIPT_NAME}" "$$" "$1" >&3
}

##########################################
# error : print error message
##########################################

function error {
  local ts
  ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")  
  printf "${RED}[%s %s %s ERROR]:${NC} %s \n" "$ts" "${SCRIPT_NAME}" "$$" "$1" >&3
}

##########################################
# fail : print failurwe message and exit
##########################################

function fail {
  local ts
  ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")  
  printf "${RED}[%s %s %s ERROR]:${NC} %s \n" "$ts" "${SCRIPT_NAME}" "$$" "$1" >&3
  exit -1
}

##########################################
# debug output
##########################################

function debug {
  local tag=$1
  local msg=$2

  if [ "$LOG_DEBUG" == "TRUE" ] && listContains "$DEBUG_FUNCTS" "$1" ; then
    local ts
    ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")  
    printf "${BROWN}[%s %s %s DEBUG]:${NC} %s: %s \n" "$ts" "${SCRIPT_NAME}" "$$" "$tag" "$msg" >&3
  fi
}

function makeUUID {
  openssl rand -hex 16
}

################################################################################
# initialize directories
################################################################################

function checkInit {
  debug "MIG_DB_DIR=$MIG_DB_DIR"
  if [ -z "$MIG_DB_DIR" ] || [ ! -d "$MIG_DB_DIR" ] ; then
    fail "MIG_DB_DIR must be defined and exist: MIG_DB_DIR=$MIG_DB_DIR"
  fi

  UNIT_DIR="${MIG_DB_DIR}/db/units"
  PROCESS_DIR="${MIG_DB_DIR}/db/process"
  FAIL_DIR="${MIG_DB_DIR}/db/fail"
  DONE_DIR="${MIG_DB_DIR}/db/done"
  TMP_DIR="${MIG_DB_DIR}/db/tmp"
  LOG_DIR="${MIG_DB_DIR}/db/log"

  if [ ! -d "$MIG_DB_DIR" ] || [ ! -d "$UNIT_DIR" ] || [ ! -d "$FAIL_DIR" ] || [ ! -d "$DONE_DIR" ] || [ ! -d "$TMP_DIR" ] ; then
      inform "initializing directory structure in $MIG_DB_DIR"
      mkdir -p "$UNIT_DIR" || fail "failed to create unit directory in $UNIT_DIR"
      mkdir -p "$PROCESS_DIR" || fail "failed to create process directory in $PROCESS_DIR"
      mkdir -p "$DONE_DIR" || fail "failed to create done directory in $DONE_DIR"
      mkdir -p "$FAIL_DIR" || fail "failed to create fail directory in $FAIL_DIR"
      mkdir -p "$TMP_DIR" || fail "failed to create tmp directory in $TMP_DIR"
      mkdir -p "$LOG_DIR" || fail "failed to create tmp directory in $LOG_DIR"
  fi

  inform "Database is in ${MIG_DB_DIR}/db"
}


################################################################################
# Set var in file
################################################################################

function setVar {
  local varName=$1
  local value=$2
  local file=$3
  local tmpFile

  #debug setVar "varName=$varName"
  #debug setVar "value=$value"
  #debug setVar "file=$file"

  if [ ! -f "$file" ] ; then 
    return 1
  fi

  tmpFile=$(mktemp -p "${TMP_DIR}")
  cat "$file" | grep -v -E "^${varName}=.*" >"$tmpFile" 
  mv -f "$tmpFile" "$file"

  #debug setVar "attempting echo ${varName}=${value} >> ${file}"

  if [[ $value =~ ^\".*\"$ ]] || [[ $value =~ ^\'.*\'$ ]] ; then 
    echo "${varName}=${value}" >> "${file}"
  else
    echo "${varName}=\"${value}\"" >> "${file}"
  fi 
  debug setVar "OK"
}

################################################################################
# move source file target failing if it exists
################################################################################

function moveFile {
  local src=$1
  local dir=$2
  local id=$3  
  local target

  logRedirect ""
  debug moveFile "src=${src} dir=${dir} id=${id}"

  target=$(mktemp -p "${dir}" "unit-${id}-XXX") 

  if mv -f "${src}" "${target}" ; then
    return 0
  else 
    return 1
  fi
}

#################################################################################
# get a randoom number in the range $1 to $2
################################################################################

function random {
  shuf -i "${1}-${2}" -n 1
}

################################################################################
# get a random file from directory in $1, move it to path in $2
################################################################################

function getRandFile {
  local dir=$1
  local file=$2
  debug getRandFile "called on dir=$dir file=$file"
  local tmp files count upper pick selFile
  tmp=$(ls "$dir")
  files=($tmp)
  count=${#files[@]}
  debug getRandFile "files: <${tmp}>, count: ${count}"
  # shellcheck disable=SC2086
  if [ $count -eq 0 ] ; then
    debug getRandFile "fail, no files in $dir"
    return 1
  fi

  upper=$((count - 1))
  pick=$(random 0 ${upper})
  debug getRandFile "pick: ${pick} ${files[$pick]}"
  selFile="${dir}/${files[$pick]}"
  if mv -f "$selFile" "$file" 2>/dev/null ; then
      return 0
  else
      return 1
  fi
}


################################################################################
# copy / append failed unit file to fail dir
################################################################################

function unitFailed {
  local unitId=$1
  local unitFile=$2
  local msg=$3
  local now failFile
  logRedirect ""
  error "unit id ${unitId}: $msg"
  inform "unit id ${unitId}: log is in $UNIT_OUTPUT_LOG"
  now=$(date +%s)
  failFile=$(mktemp -p "${FAIL_DIR}" "fail-${unitId}-XXX")
  mv "$unitFile" "$failFile"
  setVar  "FAIL_TS" "${now}" "${failFile}"
  setVar  "FAIL_MSG" "\"$msg\"" "${failFile}" 
}

##########################################
# redirect or unredirect output to file
##########################################

function logRedirect {
  local logFile=$1
  debug logRedirect "REDIRECTED=$REDIRECTED logFile=$logFile"
  if [ "$REDIRECTED" != "TRUE" ] ; then 
    if [ -n "$logFile" ] ; then  
      debug logRedirect "redirecting"
      exec 6>&1
      exec 7>&2
      exec 1>>"$logFile" 2>&1
      REDIRECTED="TRUE"
    fi  
  else    
    debug logRedirect "removing redirection"
    exec 2>&7 7>&-
    exec 1>&6 6>&-    
    REDIRECTED="FALSE"
  fi
  return 0
}

################################################################################
# make ssh command
# host: $1
# user: $2
# port: $3
# opts: $4
# command: $5    
################################################################################

function mkSshCmd {
    local host=$1
    local user=$2
    local port=$3    
    local opts=$4
    local command=$5    

    local args

    if [ -z "$host" ] ; then
      return 1      
    fi

    if [ -n "$MIG_SSH_PASSWD" ] ; then
      args=("sshpass" "-p" "\"${MIG_SSH_PASSWD}\"" "ssh" "-t")
    else
      args=("ssh")
    fi

    if [ -n "$opts" ] ; then 
      args+=($opts)    
    fi 

    if [ -n "$MIG_SSH_OPTS" ] ; then
      args+=($MIG_SSH_OPTS)
    fi

    if [ -n "$port" ] && [ "$port" -ne 22 ] ; then
      args+=(-p ${port})
    fi

    if [ -n "$user" ] ; then
      args+=("${user}@${host}")
    else
      args+=(${host})
    fi

    if [ -n "$command" ] ; then
      args+=("'${command}'")
    fi

    echo "${args[*]}"
    return 0

}

################################################################################
# make ssh command
# host: $1
# user: $2
# port: $3
# command: $4
# timeout: $5
################################################################################

function execSshCmd {
    local host=$1
    local user=$2
    local port=$3
    local command=$4
    local cmdLog=$5
    local timeout=$6    
    local sshCmd


    sshCmd=("echo" "'$command'" "|")
    sshCmd+=($(mkSshCmd "$host" "$user" "$port" "-t"))     
    
    local start now elapsed=0
    start=$(date +%s)
    if [ -z "$timeout" ] ; then       
      local exitCode
      if [ -z "$cmdLog" ] ; then 
        debug execSshCmd  "sshCmd=<${sshCmd[*]}>"
        eval "${sshCmd[*]}"
      else 
        sshCmd+=("2>&1" "|" "tee" "-a" "\"$cmdLog\"")
        debug execSshCmd  "sshCmd=<${sshCmd[*]}>"
        eval "${sshCmd[*]}"
      fi
      exitCode=$?
      now=$(date +%s)
      elapsed=$((now-start))      
      if [ $exitCode -eq 0 ] ; then  
        inform "ssh process succeeded after $elapsed seconds" 
      else 
        warn inform "ssh process terminated after $elapsed seconds with exit code $exitCode"   
      fi 
      return $exitCode
    else    
      if [ -z "$cmdLog" ] ; then 
        sshCmd+=("&")
        debug execSshCmd  "sshCmd=<${sshCmd[*]}>"
        eval "${sshCmd[*]}"
      else 
        sshCmd+=("2>&1" "|" "tee" "-a" "\"$cmdLog\"" "&")
        debug execSshCmd  "sshCmd=<${sshCmd[*]}>"        
        eval "${sshCmd[*]}"
      fi
      local pid=$!

      sleep 1

      # local found=$(ps -a | grep -E "^$pid ")
      # debug execSshCmd "monitoring pid: ${found}"

      now=$(date +%s)
      elapsed=$((now-start))

      while kill -0 "$pid" >/dev/null 2>&1 ; 
      do 
        # debug execSshCmd "check timeout=${timeout} elapsed=${elapsed}"
        #found=$(ps -a | grep -E "^$pid ")
        #debug execSshCmd "waiting for process: ${found}"
        if [ $elapsed -ge "$timeout" ] ; then
          debug execSshCmd "terminating due to timeout"
          break
        fi
        sleep 1	
        now=$(date +%s)
        elapsed=$((now-start))
      done

      if kill -0 "$pid" >/dev/null 2>&1 ; then
        kill -9 $pid || true
        warn "ssh processs timed out after $elapsed seconds"
        return 1
      else
        wait $pid || true
        exitCode=$?
        if [ $exitCode -eq 0 ] ; then  
          inform "ssh process succeeded after $elapsed seconds" 
        else 
          warn "ssh process terminated after $elapsed seconds with exit code $exitCode"   
        fi
        return $exitCode
      fi 
    fi	    
}

################################################################################
# send single file to host and unpack it to specified directory
# host: $MIG_SSH_HOST
# user: $USER
# port: $PORT
# config file in $1
# remote target file in $2
################################################################################

function sendFile {
  local srcFile="$1"
  local tgtFile="$2"
  local timeout="$3"
  local isoTs

  inform "sendFile: to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, srcFile=${srcFile}, tgtFile=${tgtFile}"

  isoTs=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
  echo "[${isoTs}] ---- sendFile $srcFile $tgtFile" 

  cmd=("gzip" "-c" "\"${srcFile}\"" "|")
  cmd+=($(mkSshCmd "$MIG_SSH_HOST" "$MIG_SSH_USER" "$MIG_SSH_PORT" "" "gzip -d -c > \"${tgtFile}\""))  

  local start now elapsed
  
  start=$(date +%s)

  if [ -z "$timeout" ] ; then 
    debug sendFile "attempting <${cmd[*]}>"
    eval "${cmd[*]}"
    local exitCode=$?
    now=$(date +%s)
    elapsed=$((now-start))
    if [ $exitCode -eq 0 ] ; then           
      inform "sendFile to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, file=${file}, tgtDir=${tgtFile} succeeded after $elapsed seconds" 
    else 
      warn "sendFile to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, dir=${file}, tgtDir=${tgtFile} terminated after $elapsed seconds with exit code ${exitCode}" 
    fi
    
    return $exitCode
  else
    cmd+=("&")
    debug sendFile "attempting <${cmd[*]}>"
    eval "${cmd[*]}"
    local pid=$!
    sleep 1
    now=$(date +%s)
    elapsed=$((now-start))

    while kill -0 "$pid" >/dev/null 2>&1 ; do
      if [ $elapsed -ge "$timeout" ] ; then 
        break
      fi 
      sleep 1
      now=$(date +%s)
      elapsed=$((now-start))
    done

    if kill -0 "$pid" >/dev/null 2>&1 ; then 
      kill -9 $pid || true
      warn "sendFile to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, file=${file}, tgtFile=${tgtFile} timedout after $elapsed seconds." 
      return 1
    else 
      wait $pid
      exitCode=$?
      if [ $exitCode -eq 0 ] ; then           
        inform "sendFile to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, file=${file}, tgtDir=${tgtFile} succeeded after $elapsed seconds" 
      else 
        warn "sendFile to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, dir=${file}, tgtDir=${tgtFile} terminated after $elapsed seconds with exit code ${exitCode}" 
      fi
      return $exitCode
    fi
  fi 
}


################################################################################
# send gzipped tarfile to host and unpack it to specified directory
# host: $MIG_SSH_HOST
# MIG_SSH_USER: $MIG_SSH_USER
# port: $PORT
# config file in $1
# target directory in $2
# timeout in $3
################################################################################

function sendTgzFile {
  local file="$1"
  local tgtDir="$2"
  local timeout="$3"
  local isoTs

  inform "sendTgzFile to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, file=${file}, tgtDir=${tgtDir}"

  isoTs=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
  echo "[${isoTs}] ---- sendTgzFile $file $tgtDir" 
  local remoteCmd=
  if [ -n "$tgtDir" ] && [ "$tgtDir" != "./" ] && [ "$tgtDir" != "." ] ; then
    remoteCmd="mkdir -p \"${tgtDir}\" && tar -C \"${tgtDir}\" -xzf -"
  else
    remoteCmd="tar -xzf -"
  fi

  cmd=($(mkSshCmd "$MIG_SSH_HOST" "$MIG_SSH_USER" "$MIG_SSH_PORT" "" "$remoteCmd"))
  cmd+=("<" "\"${file}\"")

  local start now elapsed
  
  start=$(date +%s)

  if [ -z "$timeout" ] ; then 
    debug sendTgzFile "attempting <${cmd[*]}>"
    eval "${cmd[*]}"
    local exitCode=$?
    now=$(date +%s)
    elapsed=$((now-start))
    if [ $exitCode -eq 0 ] ; then     
      inform "sendTgzFile to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, file=${file}, tgtDir=${tgtDir} succeeded after $elapsed seconds" 
    else 
      warn "sendTgzFile to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, dir=${file}, tgtDir=${tgtDir} terminated after $elapsed seconds with exit code ${exitCode}" 
    fi
    
    return $exitCode
  else
    cmd+=("&")
    debug sendTgzFile "attempting <${cmd[*]}>"
    eval "${cmd[*]}"
    local pid=$!
    sleep 1
    while kill -0 "$pid" >/dev/null 2>&1 ; do
      now=$(date +%s)
      elapsed=$((now-start))
      if [ $elapsed -ge "$timeout" ] ; then 
        break
      fi 
      sleep 1
    done

    if kill -0 "$pid" >/dev/null 2>&1 ; then 
      kill -9 $pid || true
      warn "sendTgzFile to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, file=${file}, tgtDir=${tgtDir} timed out after $elapsed seconds." 
      return 1
    else 
      wait $pid
      exitCode=$?
      if [ $exitCode -eq 0 ] ; then     
        inform "sendTgzFile to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, file=${file}, tgtDir=${tgtDir} succeeded after $elapsed seconds" 
      else 
        warn "sendTgzFile to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, dir=${file}, tgtDir=${tgtDir} terminated after $elapsed seconds with exit code ${exitCode}" 
      fi
      return $exitCode
    fi
  fi 
}

################################################################################
# send gzipped tarfile to host and unpack it to specified directory
# host: $SSH_HOST
# user: $USER
# port: $PORT
# config file in $1
# target directory in $2
################################################################################

function sendDir {
  local cfgDir="$1"
  local tgtDir=$2
  local timeout=$3

  inform "sendDir to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, cfgDir=${cfgDir}, tgtDir=${tgtDir} with timeout=${timeout}"
  local cmd remoteCmd isoTs

  isoTs=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
  echo "[${isoTs}] ---- sendDir $cfgDir $tgtDir" 

  if [ -n "$cfgDir" ] && [ "$cfgDir" != "./" ] &&  [ "$cfgDir" != "." ] ; then
    cmd=("tar" "-C" "\"${cfgDir}\"" "-czf" "-" "./")
  else
    cmd=("tar" "-czf" "-" "./")
  fi

  local remoteCmd
  if [ -n "$tgtDir" ] && [ "$tgtDir" != "./" ] && [ "$tgtDir" != "." ] ; then
    remoteCmd=("mkdir" "-p" "\"${tgtDir}\"" "&&" "tar" "-C" "\"${tgtDir}\"" "-xzf" "-")
  else
    remoteCmd=("tar" "-xzf" "-")
  fi

  cmd+=("|" $(mkSshCmd "$MIG_SSH_HOST" "$MIG_SSH_USER" "$MIG_SSH_PORT" "" "${remoteCmd[*]}" ))

  local start now elapsed

  start=$(date +%s)

  if [ -z "$timeout" ] ; then 
    debug sendDir "attempting <${cmd[*]}>"
    eval "${cmd[*]}"
    local exitCode=$?
    debug sendDir "exitCode: ${exitCode}"
    now=$(date +%s)
    elapsed=$((now-start))

    if [ $exitCode -eq 0 ] ; then
      inform "sendDir to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, dir=${cfgDir}, tgtDir=${tgtDir} succeeded after $elapsed seconds" 
    else 
      warn "sendDir to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, dir=${cfgDir}, tgtDir=${tgtDir} terminated after $elapsed seconds with exit code ${exitCode}" 
    fi
    return $exitCode
  else 
    cmd+=("&")
    debug sendDir "attempting <${cmd[*]}>"
    eval "${cmd[*]}"
    local pid=$!

    sleep 1
    
    now=$(date +%s)
    elapsed=$((now-start))
    while kill -0 "$pid" >/dev/null 2>&1 ; do
      # debug sendDir "check timeout=${timeout} elapsed=${elapsed}"
      if [ $elapsed -ge "$timeout" ] ; then 
        debug sendDir "terminating due to timeout"
        break
      fi 
      sleep 1
      now=$(date +%s)
      elapsed=$((now-start))
    done

    if kill -0 "$pid" >/dev/null 2>&1 ; then 
      kill -9 $pid || true
      warn "sendDir to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, file=${cfgDir}, tgtDir=${tgtDir} timed out after $elapsed seconds." 
      return 1
    else 
      wait $pid
      exitCode=$?
      debug sendDir "exitCode: ${exitCode}"
      if [ $exitCode -eq 0 ] ; then     
        inform "sendDir to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, dir=${cfgDir}, tgtDir=${tgtDir} succeeded after $elapsed seconds" 
      else 
        warn "sendDir to ${MIG_SSH_USER}@${MIG_SSH_HOST}:${MIG_SSH_PORT}, dir=${cfgDir}, tgtDir=${tgtDir} terminated after $elapsed seconds with exit code ${exitCode}" 
      fi
      return $exitCode
    fi
  fi
}

