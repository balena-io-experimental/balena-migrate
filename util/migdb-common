#!/bin/bash

# MIG_DB_DIR="/home/thomas/develop/balena.io/customer/sonder/test"


function color {
  if [ "$1" == "ON" ] ; then
    YELLOW='\033[1;33m'
    BROWN='\033[0;33m'
    GREEN='\033[0;32m'
    RED='\033[0;31m'
    NC='\033[0m' # No Color
  else
    YELLOW=
    BROWN=
    GREEN=
    RED=
    NC=
  fi
}

##########################################
# check if list contains string
##########################################
# careful how you call it, should be
# eg.: listContains "$SUPPORTED_OSTYPES" $OSTYPE
function listContains {
    for curr in $1
    do
        if [ "$2" == "$curr" ]; then
            return 0
        fi
    done
    return 1
}

##########################################
# inform: log info message
##########################################

function inform {
  TS=$(date +%T)
  printf "${GREEN}[${TS} ${SCRIPT_NAME} INFO ]: $1 ${NC}\n"
}


##########################################
# warn: log warning message
##########################################

function warn {
  TS=$(date +%T)
  printf "${YELLOW}[${TS} ${SCRIPT_NAME} WARN ]: $1 ${NC}\n"
}

##########################################
# fail : print failurwe message and exit
##########################################

function fail {
    TS=$(date +%T)
    printf "${RED}[${TS} ${SCRIPT_NAME} ERROR]: $1 ${NC}\n"
    exit -1
}

##########################################
# debug output
##########################################

function debug {
  local tag=$1
  local msg=$2

  if [ "$LOG_DEBUG" == "TRUE" ] && listContains "$DEBUG_FUNCTS" $1 ; then
    TS=$(date +%T)
    printf "${BROWN}[${TS} ${SCRIPT_NAME} DEBUG]: ${1}: ${2}${NC}\n"
  fi
}

function makeUUID {
  echo $(openssl rand -hex 16)
}

################################################################################
# initialize directories
################################################################################

function checkInit {
  debug "MIG_DB_DIR=$MIG_DB_DIR"
  if [ -z "$MIG_DB_DIR" ] || [ ! -d "$MIG_DB_DIR" ] ; then
    fail "MIG_DB_DIR must be defined and exist: MIG_DB_DIR=$MIG_DB_DIR"
  fi

  UNIT_DIR="${MIG_DB_DIR}/db/units"
  # PROCESS_DIR="${MIG_DB_DIR}/db/process"
  FAIL_DIR="${MIG_DB_DIR}/db/fail"
  DONE_DIR="${MIG_DB_DIR}/db/done"
  TMP_DIR="${MIG_DB_DIR}/db/tmp"
  LOG_DIR="${MIG_DB_DIR}/db/log"

  if [ ! -d "$MIG_DB_DIR" ] || [ ! -d "$UNIT_DIR" ] || [ ! -d "$FAIL_DIR" ] || [ ! -d "$DONE_DIR" ] || [ ! -d "$TMP_DIR" ] ; then
      inform "initializing directory structure in $MIG_DB_DIR"
      mkdir -p "$UNIT_DIR" || fail "failed to create orders directory in $UNIT_DIR"
      # mkdir -p "$PROCESS_DIR" || fail "failed to create process directory in $PROCESS_DIR"
      mkdir -p "$DONE_DIR" || fail "failed to create done directory in $DONE_DIR"
      mkdir -p "$FAIL_DIR" || fail "failed to create fail directory in $FAIL_DIR"
      mkdir -p "$TMP_DIR" || fail "failed to create tmp directory in $TMP_DIR"
      mkdir -p "$LOG_DIR" || fail "failed to create tmp directory in $LOG_DIR"
  fi

  inform "Database is in ${MIG_DB_DIR}/db"
}

################################################################################
# move source file target failing if it exists
################################################################################

function moveFile {
  local src=$1
  local tgt=$2

  if mv -n "${src}" "${tgt}" ; then
    if [ ! -f  "${src}" ] ; then
      return 0
    else
      mv ${src} $(mktemp -p "${FAIL_DIR}" "move-fail-XXX")
      return 1
    fi
  else
    return 2
  fi
}


################################################################################
# get a randoom number in the range $1 to $2
################################################################################

function random {
  shuf -i ${1}-${2} -n 1
}

################################################################################
# get a random file from directory in $1, move it to path in $2
################################################################################

function getRandFile {
  local dir=$1
  local file=$2
  debug getRandFile "called on dir=$dir file=$file"
  local tmp=$(ls "$dir")
  local files=($tmp)
  count=${#files[@]}
  debug getRandFile "files: <${tmp}>, count: ${count}"
  if [ $count -eq 0 ] ; then
    debug getRandFile "fail, no files in $dir"
    return 1
  fi

  local upper=$(($count - 1))
  local pick=$(random 0 ${upper})
  debug getRandFile "pick: ${pick} ${files[$pick]}"
  local selFile="${dir}/${files[$pick]}"
  if mv -f "$selFile" "$file" ; then
      return 0
  else
      return 1
  fi
}


################################################################################
# copy / append failed order file to fail dir
################################################################################
function orderFailed {
  local orderId=$1
  local orderFile=$2
  local msg=$3

  warn "ORDER ${orderId}: $msg"
  local now=$(date +%s)
  local failFile=$(mktemp -p "${FAIL_DIR}" "fail-$orderId-XXX")
  mv "$orderFile" "$failFile"
  echo "FAILT_TS=$now" >> ${failFile} || fail "failed to create fail file for order $orderId in $failFile"
  echo "FAIL_MSG=\"$msg\"" >> ${failFile} || fail "failed to create fail file for order $orderId in $failFile"
  echo "FAIL_LOG=\"$OUTPUT_LOG\"" >> ${failFile} || fail "failed to create fail file for order $orderId in $failFile"
  OUTPUT_LOG=
}


################################################################################
# make ssh command
# host: $1
# user: $2
# port: $3
################################################################################

function mkSshCmd {
    local host=$1
    local user=$2
    local port=$3
    local passwd=$4

    # debug mkSshCmd "host=${host} user=${user} port=${port}"
    # TODO: use
    #  ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no host
    #  to suppress host key errors

    if [ -n "$MIG_PASSWD" ] ; then
      local cmd="sshpass -p \"$MIG_PASSWD\" ssh"
    else
      local cmd="ssh"
    fi

    if [ -z "$host" ] ; then
      fail "no ssh host defined , please set MIG_SSH_HOST or use parameters"
    fi

    if [ -n "$MIG_SSH_OPTS" ] ; then
      local sshOpts="$MIG_SSH_OPTS"
    else
      if [ -n "$port" ] && [ $port -ne 22 ] ; then
        local sshOpts="-p ${port}"
      fi
    fi

    if [ -n "$user" ] ; then
      cmd="${cmd} ${sshOpts} ${user}@${host}"
    else
      cmd="${cmd} ${sshOpts} ${host}"
    fi

    echo "$cmd"
}

################################################################################
# send single file to host and unpack it to specified directory
# host: $SSH_HOST
# user: $USER
# port: $PORT
# config file in $1
# remote target file in $2
################################################################################

function sendFile {
  local srcFile="$1"
  local tgtFile="$2"

  inform "sendFile: to ${MIG_USR}@${MIG_SSH_HOST}:${MIG_PORT}, srcFile=${srcFile}, tgtFile=${tgtFile}"

  sshCmd=$(mkSshCmd $MIG_SSH_HOST $MIG_USR $MIG_PORT)
  local preCmd="gzip -c '$srcFile'"
  local remoteCmd="gzip -d -c > '$tgtFile'"

  local cmd="$preCmd | $sshCmd \"$remoteCmd\""

  truncate -s 0 "$OUTPUT_LOG"
  debug senFile "attempting /bin/bash -c $cmd"
  if /bin/bash -c "$cmd" > "$OUTPUT_LOG" 2>&1 ; then
    return 0
  else
    return $?
  fi
}


################################################################################
# send gzipped tarfile to host and unpack it to specified directory
# host: $SSH_HOST
# MIG_USR: $MIG_USR
# port: $PORT
# config file in $1
# target directory in $2
################################################################################

function sendTarCfg {
  local cfgFile="$1"
  local tgtDir="$2"

  inform "sendTarCfg to ${MIG_USR}@${MIG_SSH_HOST}:${MIG_PORT}, cfgFile=${cfgFile}, tgtDir=${tgtDir}"
  cmd=$(mkSshCmd $MIG_SSH_HOST $MIG_USR $MIG_PORT)

  local remoteCmd=
  if [ -n "$tgtDir" ] && [ "$tgtDir" != "./" ] && [ "$tgtDir" != "." ] ; then
    remoteCmd="mkdir -p '${tgtDir}' && tar -C '${tgtDir}' -xzf -"
  else
    remoteCmd="tar -xzf -"
  fi

  cmd="$cmd \"$remoteCmd\" < \"${cfgFile}\""

  truncate -s 0 "$OUTPUT_LOG"
  debug sendTarCfg "attempting /bin/bash -c $cmd"
  if /bin/bash -c "$cmd" > "$OUTPUT_LOG" 2>&1 ; then
    return 0
  else
    return $?
  fi
}

################################################################################
# send gzipped tarfile to host and unpack it to specified directory
# host: $SSH_HOST
# user: $USER
# port: $PORT
# config file in $1
# target directory in $2
################################################################################

function sendCfgDir {
  cfgDir="$1"
  tgtDir=$2

  inform "sendCfgDir to ${MIG_USR}@${MIG_SSH_HOST}:${MIG_PORT}, cfgDir=${cfgDir}, tgtDir=${tgtDir}"
  local cmd=$(mkSshCmd $MIG_SSH_HOST $MIG_USR $MIG_PORT $MIG_GET_OPTS)

  if [ -n "$cfgDir" ] && [ "$cfgDir" != "./" ] &&  [ "$cfgDir" != "." ] ; then
    local precmd="tar -C \"${cfgDir}\" -czf - ./"
  else
    local precmd="tar -czf - ./"
  fi

  local remoteCmd=
  if [ -n "$tgtDir" ] && [ "$tgtDir" != "./" ] && [ "$tgtDir" != "." ] ; then
    remoteCmd="mkdir -p '${tgtDir}' && tar -C '${tgtDir}' -xzf -"
  else
    remoteCmd="tar -xzf -"
  fi

  cmd="$precmd | $cmd \"$remoteCmd\""

  truncate -s 0 "$OUTPUT_LOG"
  debug sendCfgDir "attempting /bin/bash -c $cmd"
  if /bin/bash -c "$cmd" > "$OUTPUT_LOG" 2>&1  ; then
    return 0
  else
    return $?
  fi
}
