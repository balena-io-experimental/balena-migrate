#!/bin/bash

# TODOS:
#  - test in reverse ssh ENV
#  - take care of 'WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!' problems
#  - take care of 'The authenticity of host '192.168.1.16 (192.168.1.16)' can't be established.'


if [ -z "$MIG_DB_DIR" ] ; then
  MIG_DB_DIR=.
fi

COLOR=ON

# MIG_CFG_ARCHIVE= # "./test/mig_x86_64.tgz"
TGT_DIR="migrate"

DEBUG_FUNCTS="main process sendCfgDir"
LOG_DEBUG=TRUE




SCRIPT_NAME="migdb-process"
SLEEP_DURATION=5

function getCmdArgs {
  cmd=
  for var in "$@"
  do
    debug getCmdArgs "looking at $var"

    if [[ $var =~ ^--cfg-dir=.*$ ]] ; then
      MIG_CFG_DIR=$(expr match "$var" '^--cfg-dir=\(.*\)$')
      inform "set MIG_CFG_DIR=$MIG_CFG_DIR"
      continue
    fi

    if [[ $var =~ ^--min-age=.*$ ]] ; then
      MIG_MIN_AGE=$(expr match "$var" '^--min-age=\(.*\)$')
      inform "set MIG_MIN_AGE=$MIG_MIN_AGE"
      continue
    fi

    if [[ $var =~ ^--cfg-arch=.*$ ]] ; then
      MIG_CFG_ARCHIVE=$(expr match "$var" '^--cfg-arch=\(.*\)$')
      inform "set MIG_CFG_ARCHIVE=$MIG_CFG_ARCHIVE"
      continue
    fi

    if [[ $var =~ ^--app=.*$ ]] ; then
      MIG_APP=$(expr match "$var" '^--app=\(.*\)$')
      inform "set MIG_APP=$MIG_APP"
      continue
    fi

    if [[ $var =~ ^--base=.*$ ]] ; then
      MIG_DB_DIR=$(expr match "$var" '^--base=\(.*\)$')
      inform "set MIG_DB_DIR=$MIG_DB_DIR"
      continue
    fi

    if [[ $var =~ ^--color=.*$ ]] ; then
      COLOR=$(expr match "$var" '^--color=\(.*\)$')
      inform "set COLOR=$COLOR"
      color $COLOR
      continue
    fi

    if [[ $var =~ ^--host=.*$ ]] ; then
      SSH_HOST=$(expr match "$var" '^--host=\(.*\)$')
      inform "set SSH_HOST=$SSH_HOST"
      continue
    fi

    if [[ $var =~ ^--user=.*$ ]] ; then
      MIG_USR=$(expr match "$var" '^--user=\(.*\)$')
      inform "set MIG_USR=$MIG_USR"
      continue
    fi

    if [[ $var =~ ^--balena-ver=.*$ ]] ; then
      MIG_BALENA_VER=$(expr match "$var" '^--balena-ver=\(.*\)$')
      inform "set MIG_BALENA_VER=$MIG_BALENA_VER"
      continue
    fi

    fail "unrecognized argument $var"
  done
}

SCRIPT_PATH="`dirname \"${0}\"`"
source "${SCRIPT_PATH}/migdb-common"

################################################################################
# process unit file
################################################################################

function process {
  debug process "with $UNIT_FILE"

  . $UNIT_FILE

  if [ -n "$OUTPUT_LOG" ] && [ -f "$OUTPUT_LOG" ] ; then
    rm "$OUTPUT_LOG"
  fi

  OUTPUT_LOG=$(mktemp -p ${LOG_DIR} "s1-${UNIT_ID}-XXX")

  #if [ -z "$PORT" ] ; then
  #  PORT=22
  #fi

  if [ -n "$PASSWD" ] ; then
    PPRESENT="present"
  else
    PPRESENT="none"
  fi

  local now=$(date +%s)
  local age=$(($now-$CREATE_TS))
  inform "port=$MIG_PORT, uuid=${UUID}, user=${MIG_USR}, status:${STATUS}, passwd=${PPRESENT} age=${age} sec."

  if [ -n "$MIG_MIN_AGE" ] && [ ${age} -lt ${MIG_MIN_AGE} ] ; then
    inform "giving device more time to connect"
    moveFile "$UNIT_FILE" "${UNIT_DIR}/unit-${UNIT_ID}" || fail "failed to restore order file"
    sleep 5
    return 0
  fi

  if [ -n "$MIG_CFG_ARCHIVE" ] && [ -f "$MIG_CFG_ARCHIVE" ] ; then
    if ! sendTarCfg "$MIG_CFG_ARCHIVE" "$TGT_DIR" ; then
      orderFailed $UNIT_ID "$UNIT_FILE" "failed to transmit configuration in ${CFG_ARCHIVE} to ${MIG_USR}@${SSH_HOST}:${MIG_PORT}"
      return 0
    fi
  else
    if [ -n "$MIG_CFG_DIR" ] && [ -d "$MIG_CFG_DIR" ] ; then
      if ! sendCfgDir "$MIG_CFG_DIR" "$TGT_DIR" ; then
        orderFailed $UNIT_ID "$UNIT_FILE" "failed to transmit configuration in ${MIG_CFG_DIR} to ${MIG_USR}@${SSH_HOST}:${MIG_PORT}"
        return 0
      fi
    fi
  fi

  inform "registering device with MIG_APP=$MIG_APP"
  local tmpStr=$(balena device register $MIG_APP 2>"${OUTPUT_LOG}")
  if [ $? -ne 0 ] ; then
    orderFailed $UNIT_ID "$UNIT_FILE" "failed to register device to MIG_APP=$MIG_APP"
    return 0
  fi

  UUID=$(expr match "$tmpStr" '^[^:]\+:[ ]*\([^ ]\+\)$')

  if [ -z "$UUID" ] ; then
    orderFailed $UNIT_ID "$UNIT_FILE" "no UUID found in register response <$tmpStr>"
    return 0
  fi

  inform "using application UUID=$UUID"

  # balena config generate --device 0e203b4 --version 2.26.0 --output config.json --network ethernet --appUpdatePollInterval 10


  local cfgFile=$(mktemp -p "${TMP_DIR}" "s1-config-XXX")
  inform "generating device config file in $cfgFile"
  if ! balena config generate --device $UUID --version $MIG_BALENA_VER --output "$cfgFile" --network ethernet --appUpdatePollInterval 10 > "$OUTPUT_LOG" 2>&1 ; then
    orderFailed $UNIT_ID "$UNIT_FILE" "failed to create config using <balena config generate --device $UUID --version $MIG_BALENA_VER --output "$cfgFile" --network ethernet --appUpdatePollInterval 10>"
    return 0
  fi

  if ! grep "\"uuid\":\"$UUID\"" "$cfgFile" > "$OUTPUT_LOG" 2>&1 ; then
    orderFailed $UNIT_ID "$UNIT_FILE" "cannot find UUID=$UUID in $cfgFile"
    return 0
    fail ""
  fi

  inform "device config file appears valid, copying to $TGT_DIR/balena-migrate-config.json on ${MIG_USR}@${SSH_HOST}:${MIG_PORT}"

  local sshCmd=$(mkSshCmd $SSH_HOST $MIG_USR $MIG_PORT "$PASSWD")

  if ! sendFile "$cfgFile"  "$TGT_DIR/balena-migrate-config.json" ; then
    orderFailed $UNIT_ID "$UNIT_FILE" "failed to transmit generated config file to ${MIG_USR}@${SSH_HOST}:${MIG_PORT}"
    rm "$cfgFile"
    return 0
  else
    rm "$cfgFile"
  fi

  inform "setting variable MIGRATE_SEMAPHORE to 'balena-migrated' on device UUID=$UUID"
  if  ! balena env add MIGRATE_SEMAPHORE balena-migrated --device $UUID 2>&1 ; then
      orderFailed $UNIT_ID "$UNIT_FILE" "failed to set variable MIGRATE_SEMAPHORE to 'balena-migrated' on device UUID=$UUID"
      return 0
  fi

  local remoteCmd=
  if [ -n "$TGT_DIR" ] && [ "$TGT_DIR" != "./" ] && [ "$TGT_DIR" != "." ] ; then
    remoteCmd="cd '$TGT_DIR' && "
  fi
  # TODO: sudo needed ?
  remoteCmd="${remoteCmd} sudo ./balena-migrate --balena-cfg=balena-migrate-config.json"
  cmd="$sshCmd \"$remoteCmd\""

  debug process "attempting </bin/bash -c ${cmd}>"
  truncate -s 0 "$OUTPUT_LOG"
  if /bin/bash -c "$cmd" 2>&1 | tee "$OUTPUT_LOG"  ; then
    local successMsg=$(grep "^.*\[.*balena-stage1\] INFO:.*\+\s\+migration successful,.*" "$OUTPUT_LOG")
    if  [ -n "$successMsg" ] ; then
      if [[ "$successMsg" =~ *.please\ reboot\ system.* ]] ; then
        if ! "$sshCmd \"sudo reboot\"" >> "$OUTPUT_LOG" 2>&1 ; then
          orderFailed $UNIT_ID "$UNIT_FILE" "failed reboot on ${MIG_USR}@${SSH_HOST}:${MIG_PORT}"
          return 0
        fi
      fi

      sed -i 's/^\(STATUS=\).*$/\1MIGRATED/' "${UNIT_FILE}" || fail "failed to update status on ${UNIT_FILE}"

      local now=$(date +%s)
      echo "STATUS_TS=$now" >> "$UNIT_FILE"
      echo "DUE_TS=$(($now+180))" >> "$UNIT_FILE"
      echo "DEVICE_ID=$UUID" >> "$UNIT_FILE"

      echo "MIGRATE_S1_LOG=\"$OUTPUT_LOG\"" >> "$UNIT_FILE"
      OUTPUT_LOG=

      moveFile "$UNIT_FILE" "${DONE_DIR}/O${UNIT_ID}" || fail "failed to move ${UNIT_FILE} to ${DONE_DIR}/unit-${UNIT_ID}"
    else
      orderFailed $UNIT_ID "$UNIT_FILE" "failed run migrate cmd on ${MIG_USR}@${SSH_HOST}:${MIG_PORT}"
      return 0
    fi
  else
    orderFailed $UNIT_ID "$UNIT_FILE" "failed run migrate cmd on ${MIG_USR}@${SSH_HOST}:${MIG_PORT}"
    return 0
  fi

  sleep 3
  if [ -f "$UNIT_FILE" ] ; then
    rm $UNIT_FILE
  fi
}

################################################################################
# main
################################################################################

color ON

getCmdArgs "$@"

checkInit

debug main "MIG_DB_DIR=$MIG_DB_DIR"

while true ; do
  inform "attempting to get an order"
  UNIT_FILE=$(mktemp -p "$TMP_DIR" "s1-proc-XXX")
  # debug main "UNIT_FILE=$UNIT_FILE"
  if getRandFile "$UNIT_DIR" "$UNIT_FILE" ; then
    inform "getOrder success, order file: $UNIT_FILE"
    process
  else
    rm $UNIT_FILE
    inform "getOrder returned no order, sleeping for ${SLEEP_DURATION} s"
    sleep $SLEEP_DURATION
  fi
done
