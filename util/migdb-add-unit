#!/bin/bash

SCRIPT_PATH="`dirname \"${0}\"`"
source "${SCRIPT_PATH}/migdb-common"

color ON

if [ -z "$MIG_DB_DIR" ] ; then
  MIG_DB_DIR=.
fi

DEBUG_FUNCTS="main getCmdArgs checkInit"
LOG_DEBUG="TRUE"
SCRIPT_NAME="migdb-add-unit"

function getCmdArgs {
  local cmd=
  local paramNo=0

  if [ "$#" -lt 1 ] ; then
    warn "no command args given"
    echo "USAGE: addHost [options] <unitId>"
    echo "options are:"
    echo "  --cfg=<migrate-config-file> - unit specific config variables in bash / sh format"
    echo "  --host=<ssh-host> - unit specific ssh host"
    echo "  --port=<ssh port> - unit specific ssh port to use"
    echo "  --user=<ssh user> - unit specific ssh user"
    echo "  --passwd=<ssh password> - unit specific ssh password"
    echo "  --app=<balena-application> - balena application to register with"
    echo "  --ssh-opts=<ssh-opts> - unit specfic ssh options"
    echo "  --base=<db base dir> - base directory of order db"
    echo "  --color=<ON/OFF> - Anything other than ON switches colored output off"
    exit 1
  fi

  for var in "$@"
  do
    debug getCmdArgs "looking at $var"

    if [[ $var =~ ^-.*$ ]] ; then
      if [[ $var =~ ^--cfg=.*$ ]] ; then
        MIG_CFG=$(expr match "$var" '^--cfg=\(.*\)$')
        debug getCmdArgs "set MIG_CFG=$MIG_CFG"
        continue
      fi

      if [[ $var =~ ^--ssh-opts=.*$ ]] ; then
        MIG_CFG=$(expr match "$var" '^--ssh-opts=\(.*\)$')
        debug getCmdArgs "set MIG_SSH_OPTS=$MIG_SSH_OPTS"
        continue
      fi

      if [[ $var =~ ^--app=.*$ ]] ; then
        MIG_APP=$(expr match "$var" '^--app=\(.*\)$')
        debug getCmdArgs "set MIG_APP=$MIG_APP"
        continue
      fi

      if [[ $var =~ ^--host=.*$ ]] ; then
        MIG_SSH_HOST=$(expr match "$var" '^--host=\(.*\)$')
        debug getCmdArgs "set MIG_SSH_HOST=$MIG_SSH_HOST"
        continue
      fi

      if [[ $var =~ ^--base=.*$ ]] ; then
        MIG_DB_DIR=$(expr match "$var" '^--base=\(.*\)$')
        debug getCmdArgs "set MIG_DB_DIR=$MIG_DB_DIR"
        continue
      fi

      if [[ $var =~ ^--color=.*$ ]] ; then
        COLOR=$(expr match "$var" '^--color=\(.*\)$')
        debug getCmdArgs "set COLOR=$COLOR"
        color $COLOR
        continue
      fi

      if [[ $var =~ ^--get-opts=.*$ ]] ; then
        MIG_GET_OPTS=$(expr match "$var" '^--app=\(.*\)$')
        debug getCmdArgs "set MIG_GET_OPTS=$MIG_GET_OPTS"
        continue
      fi

      if [[ $var =~ ^--port=.*$ ]] ; then
        MIG_SSH_PORT=$(expr match "$var" '^--port=\(.*\)$')
        debug getCmdArgs "set MIG_SSH_PORT=$MIG_SSH_PORT"
        continue
      fi

      if [[ $var =~ ^--user=.*$ ]] ; then
        MIG_SSH_USER=$(expr match "$var" '^--user=\(.*\)$')
        debug getCmdArgs "set MIG_SSH_USER=$MIG_SSH_USER"
        continue
      fi

      if [[ $var =~ ^--passwd=.*$ ]] ; then
        MIG_SSH_PASSWD=$(expr match "$var" '^--passwd=\(.*\)$')
        debug getCmdArgs "set MIG_SSH_PASSWD=$MIG_SSH_PASSWD"
        continue
      fi

      fail "unrecognized argument $var"
    else
      case $paramNo in
        0)
          UNIT_ID="$var"
          ;;
        *)
          fail "unexpected argument $var"
          ;;
      esac
      paramNo=$(($paramNo+1))
      continue
    fi
  done
}

# debug main "base dir is: $MIG_DB_DIR, orders dir is: $ORDERS"

getCmdArgs "$@"

if [ -n "$MIG_CFG" ] && [ -f "$MIG_CFG" ] ; then
  inform "loading config from $MIG_CFG"
  source "$MIG_CFG"
fi

checkInit

UNIT_FILE="${UNIT_DIR}/unit-${UNIT_ID}"

# echo "unit file: $UNIT_FILE"

if [ -f "${UNIT_FILE}" ] ; then
  fail "an order file for order $UNIT_ID exists"
fi

# TODO: make this more generic, eg write a file with options / host / user / password instead
#if [ -n "$MIG_GET_OPTS" ] && [ -f "$MIG_GET_OPTS" ] ; then
#  DYN_OPTS_RAW=$(${MIG_GET_OPTS} ${UNIT_ID})
#  DYN_SSH_OPTS="${DYN_OPTS_RAW##*$'\n'}"
# DYN_SSH_OPTS=$(expr match "$DYN_SSH_OPTS" '^SSH_OPTS \(.*\)$') || true
#  if [ -z "$DYN_SSH_OPTS" ] ; then
#    warn "failed to prepare ssh opts for device $UNIT_ID"
#    warn "$MIG_GET_OPTS output:"
#    echo "$DYN_OPTS_RAW"
#    exit 1
#  fi

#  if [ -n "$MIG_SSH_OPTS" ] ; then
#    MIG_SSH_OPTS="$MIG_SSH_OPTS $DYN_SSH_OPTS"
#  else
#    MIG_SSH_OPTS="$DYN_SSH_OPTS"
#  fi
#fi

if []


TMP_FILE=$(mktemp -p "${TMP_DIR}")
debug main "creating file ${TMP_FILE}"

if [ $EUID -eq 0 ]; then
  # allow non root user to modify file, otherwise migdb-process needs sudo too
  chmod 777 "${TMP_FILE}"
fi

cat <<EOI > "${TMP_FILE}"  || fail "failed to create order file for orderid $UNIT_ID"
UNIT_ID=${UNIT_ID}
STATUS=INIT
CREATE_TS=$(date +%s)
EOI

if [ -n "$MIG_SSH_HOST" ] ; then
  echo "MIG_SSH_HOST=${MIG_SSH_HOST}" >> "${TMP_FILE}"
fi

if [ -n "$MIG_SSH_USER" ] ; then
  echo "MIG_SSH_USER=${MIG_SSH_USER}" >> "${TMP_FILE}"
fi

if [ -n "$MIG_SSH_PASSWD" ] ; then
  echo "MIG_SSH_PASSWD=\"${MIG_SSH_PASSWD}\"" >> "${TMP_FILE}"
fi

if [ -n "$MIG_SSH_PORT" ] ; then
  echo "MIG_SSH_PORT=${MIG_SSH_PORT}" >> "${TMP_FILE}"
fi

if [ -n "$MIG_SSH_OPTS" ] ; then
  echo "MIG_SSH_OPTS=\"${MIG_SSH_OPTS}\"" >> "${TMP_FILE}"
fi

if [ -n "$MIG_APP" ] ; then
  echo "MIG_APP=\"${MIG_APP}\"" >> "${TMP_FILE}"
fi


if moveFile "$TMP_FILE" "${UNIT_FILE}" ; then
  inform "order file created for order id ${UNIT_ID},  port $MIG_SSH_PORT in ${UNIT_FILE}"

  if ! ps -av | grep migdb-process ; then
     inform "it appears that the migdb-process script is not running, please run the script to process your unit files"
  fi
else
  fail "failed to create order file for order ${UNIT_ID} in ${UNIT_FILE}"
fi
