#!/bin/bash

HOME_DIR="."
CONFIG_TXT="./config.txt"   # /boot/config.txt
CMDLINE_TXT="./cmdline.txt" # /boot/cmdline.txt
INITRAMFS_NAME="balena-migrate-initramfs-$(uname -r)"
BOOT_DIR="/tmp" # "/boot"
MK_INITRAMFS="TRUE"
SCRIPT_NAME="make-rpi-initramfs"
IMAGE_NAME="resin-resintest-raspberrypi3-2.15.1+rev2-dev-v7.16.6.img.gz"
USE_TMPFS= # "TRUE"
MIGRATE_CONF=/etc/balena-migrate.conf



##########################################
# log functions
##########################################

function inform {
    echo "[$(date +%T) ${SCRIPT_NAME}] INFO: $1"
}

function warn {
    echo "[$(date +%T) ${SCRIPT_NAME}] WARN: $1"
}

function simulate {
    echo "[$(date +%T) ${SCRIPT_NAME}] INFO: would execute \"$*\""
}

function clean {
    if [ -n "${CONFIG_TXT_BACKUP}" ] ; then
        cp ${CONFIG_TXT_BACKUP} ${CONFIG_TXT}
    fi
}

##########################################
# fail : try to resotore & reboot
##########################################

function fail {
    echo "[$(date +%T) ${SCRIPT_NAME}] ERROR: $1"
    clean
    exit -1
}

##########################################
# split partition name into parts
# /dev/nvme0n1p1 -> "/dev/ nvme0n1 1 p"
##########################################

function splitPartName {
    local partName=$1
    local pathName=$(expr match "${partName}" '\(.*/\)[^/]\+')
    local tmpName1=$(${LSBLK} -no kname ${partName})
    local tmpName2=$(${READLINK} -f "/sys/class/block/${tmpName1}/..")
    local devName=$(basename "${tmpName2}")
    local tmp=${tmpName1:${#devName}}
    local pad=$(expr match "${tmp}" '\([^0-9]*\)[0-9]\+')
    local no=$(expr match "${tmp}" '[^0-9]*\([0-9]\+\)')
    echo "${pathName} ${devName} ${no} ${pad}"
}




##########################################
# main : create initramfs & install it
##########################################


if [[ $EUID -ne 0 ]]; then
    fail "This script must be run as root"
fi

inform "establishing required programs"

#CURL=$(which curl) || fail "could not find required command 'curl'"
#DD=$(which dd) || fail "missing command: dd"
#GREP=$(which grep) || fail "could not find required command 'grep'"
#LOSETUP=$(which losetup) || fail "could not find required command 'losetup'"
#MKDIR=$(which mkdir) || fail "missing command: mkdir"
#MKFSE4=$(which mkfs.ext4) || fail "could not find required command 'mkfs.ext4'"
#MKSWAP=$(which mkswap) || fail "could not find required command 'mkswap'"
#MOUNT=$(which mount) || fail "missing command: mount"
#PARTED=$(which parted) || fail "missing command: parted"
#PARTED_READ=${PARTED}
#RSYNC=$(which rsync) || fail "could not find required command 'rsync'"
#SED=$(which sed) || fail "could not find required command 'sed'"
#SWAPOFF=$(which swapoff) || fail "could not find required command 'swapoff'"
#SWAPON=$(which swapon) || fail "could not find required command 'swapon'"
#SWAPSTAT=$SWAPON
#TUNE2FS=$(which tune2fs) || fail "could not find required command 'tune2fs'"
#UMOUNT=$(which umount) || fail "missing command: umount"
#GUNZIP=$(which gunzip) || fail "missing command: gunzip"
#GZIP=$(which gzip) || fail "missing command: gzip"
#FINDMNT=$(which findmnt) || fail "missing command: findmnt"
LSBLK=$(which lsblk) || fail "missing command: lsblk"
READLINK=$(which readlink) || fail "missing command: readlink"
#FSCK=$(which fsck) || fail "missing command: fsck"
#CHMOD=$(which chmod) || fail "missing command: chmod"
#FDISK=$(which fdisk) || fail "missing command: fdisk"
#TAR=$(which tar) || fail "missing command: tar"
# checkout grub
#GRUBUPDT=$(which update-grub) || fail "could not find required command 'update-grub'"
#GRUBREBOOT=$(which grub-reboot) || fail "could not find required command 'grub-reboot'"
#GRUBINST=$(which grub-install) || fail "could not find required command 'grub-install'"
#GRUB_STR=$($GRUBINST -V)
#GRUB_VER=$(expr match "$GRUB_STR" '.*(GRUB).\([0-9]*\).*')
#if (( GRUB_VER < GRUB_MIN_VER )) ; then
#    fail "need at least grub verson $GRUB_MIN_VER but found `expr match "$GRUB_STR" '.*(GRUB).\(.*\)'`"
#fi

inform "checked required programs"


HOME_DIR=$(pwd)
ROOT_FS=$(findmnt --noheadings --canonicalize --output SOURCE /)
TMP=($(splitPartName ${ROOT_FS}))

ROOT_DEV=${TMP[0]}${TMP[1]}

inform "ROOT_DEV=${ROOT_DEV}"

cat <<EOI > ${MIGRATE_CONF}
#!/bin/sh
# DO NOT EDIT ! This file is supposed to be created by stage1 script

LOG_DRIVE=/dev/sda1
LOG_FS_TYPE=ext2
LOG_MOUNT_DIR=/mnt/log
LOG_FILE=migrate.log

STRATEGY=     # "RESIZE" "TMPFS" or empty for none
ROOT_DEV=${ROOT_DEV}
HOME_DIR=${HOME_DIR}
IMAGE_FILE=resin-resintest-raspberrypi3-2.15.1+rev2-dev-v7.16.6.img.gz
BACKUP_FILE=backup.gz
DATA_TMP=/balena-tmp
MIGRATE_TMP=/balena-migrate

IMG_DATA_NAME=/dev/mmcblk0p6          # resinOS-data
# IMG_DATA_OFFSET=729808896   # resinOS-data
IMG_DATA_TYPE=ext4          # resinOS-data
# TODO: probably superfluous
MIGRATEFS_MOUNT_POINT=/balena-migrate

EOI

if [ "$STRATEGY" == "TMPFS" ] ; then
    cat <<EOI >> ${MIGRATE_CONF}
MEM_MIN_AVAIL=600000
MEM_TMPFS_SIZE=512M
EOI
else
  if [ "$STRATEGY" == "RESIZE" ] ; then
    cat <<EOI >> ${MIGRATE_CONF}
MEM_MIN_AVAIL=600000
MEM_TMPFS_SIZE=512M
RESIZE_FS="${ROOT_FS}"
RESIZE_DEV=${ROOT_DEV}
RESIZE_PART_NO=${TMP[2]}
# TODO: actually calculate this
RESIZE_PART_START=94208
RESIZE_PART_END=31116287
RESIZE_PART_TYPE=primary
RESIZE_PART_FS=ext4
RESIZE_PART_TO=26921984
RESIZE_PART_SIZE=26827777

NEW_PART_TYPE="primary"
NEW_PART_FS="ext2"
NEW_PART_START=26926080
NEW_PART_TO=31022087
NEW_PART_NAME=/dev/mmcblk0p3
EOI
  fi
fi

if [ "${MK_INITRAMFS}" == TRUE ] ; then
    inform "creating initramfs: mkinitramfs -k -v -d ${HOME_DIR}/initramfs-tools -o ${HOME_DIR}/${INITRAMFS_NAME}"
    mkinitramfs -k -v -d ${HOME_DIR}/initramfs-tools -o ${HOME_DIR}/${INITRAMFS_NAME} || fail "failed to crete initramfs in ${HOME_DIR}/${INITRAMFS_NAME}"

    inform "copying initramfs"
    cp ${HOME_DIR}/${INITRAMFS_NAME} /boot || fail "failed to copy ${HOME_DIR}/${INITRAMFS_NAME} to /boot"
fi

## add to /boot/config.txt
# initramfs init.gz followkernel
# TODO: identify other options that need to be modified

inform "making backup of config.txt"
CONFIG_TXT_BACKUP="${CONFIG_TXT}.$(date +%Y%m%d-%H-%M-%S)"
cp ${CONFIG_TXT}  ${CONFIG_TXT_BACKUP}
if grep -q "^[^#]*initramfs.*" ${CONFIG_TXT} ; then
    inform "modifying ${CONFIG_TXT}"
    sed -i "s/^[^#]*initramfs.*\$/initramfs ${INITRAMFS_NAME} followkernel/" ${CONFIG_TXT}
else
    inform "appending to ${CONFIG_TXT}"
    echo "initramfs ${INITRAMFS_NAME} followkernel" >> ${CONFIG_TXT}
fi

## add to /boot/cmdline.txt
# nosplash quiet=n (or delete quiet) debug=y

inform "making backup of config.txt"
CMDLINE_TXT_BACKUP="${CMDLINE_TXT}.$(date +%Y%m%d-%H-%M-%S)"
cp ${CMDLINE_TXT}  ${CMDLINE_TXT_BACKUP}

while read line
do
     if [[ $line =~ nosplash ]]; then
           line=${line/BILL_NO/NA}
     fi
done < "${CMDLINE_TXT}"

if ! grep -q "nosplash" ${CMDLINE_TXT} ; then
    inform "modifying ${CMDLINE_TXT}"
    sed -i "s/^[^#]*initramfs.*\$/initramfs ${INITRAMFS_NAME} followkernel/" ${CONFIG_TXT}
else
    inform "appending to ${CONFIG_TXT}"
    echo "initramfs ${INITRAMFS_NAME} followkernel" >> ${CONFIG_TXT}
fi
