#!/bin/bash

STRATEGY="DEFAULT"
HOME_DIR="."
CONFIG_TXT="/boot/config.txt"   # /boot/config.txt
CMDLINE_TXT="/boot/cmdline.txt" # /boot/cmdline.txt
INITRAMFS_NAME="balena-migrate-initramfs-$(uname -r)"
MK_INITRAMFS="TRUE"
DO_REBOOT="FALSE"
SCRIPT_NAME="balena-stage1"
IMAGE_NAME="resin-resintest-raspberrypi3-2.15.1+rev2-dev-v7.16.6.img.gz"
MIGRATE_CONF=/etc/balena-migrate.conf
DEBUG="TRUE"
BACKUP_FILE=backup.gz

##########################################
# log functions
##########################################

function inform {
    echo "[$(date +%T) ${SCRIPT_NAME}] INFO: $1"
}

function warn {
    echo "[$(date +%T) ${SCRIPT_NAME}] WARN: $1"
}

function simulate {
    echo "[$(date +%T) ${SCRIPT_NAME}] INFO: would execute \"$*\""
}

function clean {
    if [ -n "${CONFIG_TXT_BACKUP}" ] ; then
        cp ${CONFIG_TXT_BACKUP} ${CONFIG_TXT}
    fi
}

##########################################
# fail : try to resotore & reboot
##########################################

function fail {
    echo "[$(date +%T) ${SCRIPT_NAME}] ERROR: $1"
    clean
    exit -1
}

##########################################
# split partition name into parts
# /dev/nvme0n1p1 -> "/dev/ nvme0n1 1 p"
##########################################

function splitPartName {
    local partName=$1
    local pathName=$(expr match "${partName}" '\(.*/\)[^/]\+')
    local tmpName1=$(lsblk -no kname ${partName})
    local tmpName2=$(readlink -f "/sys/class/block/${tmpName1}/..")
    local devName=$(basename "${tmpName2}")
    local tmp=${tmpName1:${#devName}}
    local pad=$(expr match "${tmp}" '\([^0-9]*\)[0-9]\+')
    local no=$(expr match "${tmp}" '[^0-9]*\([0-9]\+\)')
    echo "${pathName} ${devName} ${no} ${pad}"
}




##########################################
# main : create initramfs & install it
##########################################


if [[ $EUID -ne 0 ]]; then
    fail "This script must be run as root"
fi

inform "establishing required programs"

# TODO: Check / install tools needed for initramfs too
INITRAM_REQUIRED_PGMS="mkdir dd gzip grep awk cp fuser df echo rm reboot sleep partprobe"
REQUIRED_PGMS="$INITRAM_REQUIRED_PGMS lsblk readlink" #  gzip

for PGM in $REQUIRED_PGMS
do
    PGM_PATH="$(whereis -b $PGM | awk '{ print $2}')"
    if [ -z "$PGM_PATH" ] ; then
      fail "cannot find required program: $PGM"
   fi
done

inform "checked required programs"

HOME_DIR=$(pwd)
ROOT_FS=$(findmnt --noheadings --canonicalize --output SOURCE /)
TMP=($(splitPartName ${ROOT_FS}))

ROOT_DEV=${TMP[0]}${TMP[1]}

inform "ROOT_DEV=${ROOT_DEV}"

###########################
## write /etc/migrate.conf
###########################

cat <<EOI > ${MIGRATE_CONF}
#!/bin/sh
# DO NOT EDIT ! This file is supposed to be created by stage1 script

REQUIRED_PGMS="$INITRAM_REQUIRED_PGMS"
# LOG_DRIVE=/dev/sda1
LOG_FS_TYPE=ext2
LOG_MOUNT_DIR=/mnt/log
LOG_FILE=migrate.log

STRATEGY=$STRATEGY     # "DEFAULT" "RESIZE"
ROOT_DEV=${ROOT_DEV}
HOME_DIR=${HOME_DIR}
IMAGE_FILE=resin-resintest-raspberrypi3-2.15.1+rev2-dev-v7.16.6.img.gz
BACKUP_FILE=$BACKUP_FILE
DATA_TMP=/balena-tmp
MIGRATE_TMP=/balena-migrate

IMG_DATA_NAME=/dev/mmcblk0p6          # resinOS-data
# IMG_DATA_OFFSET=729808896   # resinOS-data
IMG_DATA_TYPE=ext4          # resinOS-data
# TODO: probably superfluous
MIGRATEFS_MOUNT_POINT=/balena-migrate

EOI

#####################################
## USE: resize strategy - unfinished
#####################################

if [ "$STRATEGY" == "RESIZE" ] ; then
  cat <<EOI >> ${MIGRATE_CONF}
MEM_MIN_AVAIL=600000
MEM_TMPFS_SIZE=512M
RESIZE_FS="${ROOT_FS}"
RESIZE_DEV=${ROOT_DEV}
RESIZE_PART_NO=${TMP[2]}
# TODO: actually calculate this
RESIZE_PART_START=94208
RESIZE_PART_END=31116287
RESIZE_PART_TYPE=primary
RESIZE_PART_FS=ext4
RESIZE_PART_TO=26921984
RESIZE_PART_SIZE=26827777

NEW_PART_TYPE="primary"
NEW_PART_FS="ext2"
NEW_PART_START=26926080
NEW_PART_TO=31022087
NEW_PART_NAME=/dev/mmcblk0p3
REQUIRED_PGMS="$INITRAM_REQUIRED_PGMS"
EOI
fi

if [ "${MK_INITRAMFS}" == TRUE ] ; then
    inform "creating initramfs: mkinitramfs -k -v -d ${HOME_DIR}/initramfs-tools -o ${HOME_DIR}/${INITRAMFS_NAME}"
    mkinitramfs -k -v -d ${HOME_DIR}/initramfs-tools -o ${HOME_DIR}/${INITRAMFS_NAME} || fail "failed to crete initramfs in ${HOME_DIR}/${INITRAMFS_NAME}"

    inform "copying initramfs"
    cp ${HOME_DIR}/${INITRAMFS_NAME} /boot || fail "failed to copy ${HOME_DIR}/${INITRAMFS_NAME} to /boot"
fi

##########################
## Modify /boot/config.txt
##########################
inform "making backup of config.txt"
CONFIG_TXT_BACKUP="${CONFIG_TXT}.$(date +%Y%m%d-%H-%M-%S)"
TMP_FILE=$(mktemp)
INITRAM_CMD="initramfs ${INITRAMFS_NAME} followkernel"

while read -r line
do
  if [[ $line =~ ^\s*\# ]] ; then
    echo $line >> $TMP_FILE
    continue
  fi

  if [[ $line =~ ^\s*initramfs ]] ; then
    if [ "$line" != "$INITRAM_CMD" ] ; then
      echo "# $line" >> $TMP_FILE
    fi
  else
    echo $line >> $TMP_FILE
  fi
done < "${CONFIG_TXT}"
echo $INITRAM_CMD >> $TMP_FILE
cp $TMP_FILE $CONFIG_TXT
rm $TMP_FILE

###########################
## Modify /boot/cmdline.txt
###########################

if [ "$DEBUG" == "TRUE" ] ; then
  CMD_LINE=$(cat ${CMDLINE_TXT})
  if [[ ! $CMD_LINE =~ debug ]] ; then
    inform "making backup of ${CMDLINE_TXT}"
    CMDLINE_TXT_BACKUP="${CMDLINE_TXT}.$(date +%Y%m%d-%H-%M-%S)"
    cp ${CMDLINE_TXT}  ${CMDLINE_TXT_BACKUP}
  	CMD_LINE="${CMD_LINE} debug"
  	echo $CMD_LINE > cmdline.txt
  fi
fi

###########################
## create backup
###########################

inform "creating backup in ./$BACKUP_FILE"
gzip -c -r /etc/ > "./$BACKUP_FILE"

# TODO: check / restrict size of backup file

if [ "$DO_REBOOT" == "TRUE" ] ; then
  inform "rebooting"
  reboot
fi
