#!/bin/bash
####################################################################
# strategy
# DEFAULT: copy os image & backup to initramfs, unmount root, reflash drive,
#          partprobe and mount resin-data to copy backup, reboot
# RESIZE:  unfinished - resize root file system & partition in local-premount
#          use the space to store balenaOS image & backup
####################################################################
STRATEGY="DEFAULT"
# where everything is
# TODO: establish & use an absolute path to a set home directory that is not
#       necessarily PWD
HOME_DIR="."
# raspi config.txt to modify
CONFIG_TXT="/boot/config.txt"
# raspi cmdline.txt to modify
CMDLINE_TXT="/boot/cmdline.txt"
# reboot automatically after script has finished by setting to "TRUE"
DO_REBOOT="FALSE"
# name of the balenaOS image to flash (expected in $HOMEDIR)
IMAGE_NAME="resin-resintest-raspberrypi3-2.15.1+rev2-dev-v7.16.6.img.gz"
# where the migrate conf is created - DO NOT MODIFY hardcoded in initramfs scripts
MIGRATE_CONF=/etc/balena-migrate.conf
# switch on initramfs / kernel debug mode by seting to "TRUE"
DEBUG="TRUE"
# name of backup file to create/transfer to balena-data
BACKUP_FILE=backup.tgz
# TODO: customer defined backup script to call
BACKUP_SCRIPT=
BACKUP_DIRECTORIES="/etc"
# DEBUG end initramfs scripts before unmounting root / flashing the image
NO_FLASH="FALSE"
# DEBUG: do not modify config.txt if set to "TRUE"
NO_SETUP="TRUE"
# create initramfs in contrast to using an initramfs supplied
MK_INITRAMFS="FALSE" # "TRUE"
# name of initramfs to be created/used expected in $HOMEDIR
INITRAMFS_NAME="balena-migrate-initramfs-$(uname -r)"
# DEBUG verbose build process
MK_INITRAM_VERBOSE="FALSE"
# DEBUG keep initramfs layout
MK_INITRAM_RETAIN="FALSE"
# script namme for logging
SCRIPT_NAME="balena-stage1"

# set to "TRUE" if a wifi config is provided in image
HAS_WIFI_CFG="FALSE" #
MIGRATE_ALL_WIFIS="FALSE" # "list of wifi networks to migrate"
MIGRATE_WIFI_CFG="migrate-wifis" # "list of wifi networks to migrate, one per line"

##########################################
# log functions
##########################################

function inform {
    echo "[$(date +%T) ${SCRIPT_NAME}] INFO: $1"
}

function warn {
    echo "[$(date +%T) ${SCRIPT_NAME}] WARN: $1"
}

function simulate {
    echo "[$(date +%T) ${SCRIPT_NAME}] INFO: would execute \"$*\""
}

function clean {
    if [ -n "${CONFIG_TXT_BACKUP}" ] ; then
        cp ${CONFIG_TXT_BACKUP} ${CONFIG_TXT}
    fi
}

##########################################
# fail : try to resotore & reboot
##########################################

function fail {
    echo "[$(date +%T) ${SCRIPT_NAME}] ERROR: $1"
    clean
    exit -1
}

##########################################
# create a network manager wifi file
##########################################

function create_nmgr_file {
  local WIFI_NO=$1
  local WIFI_SSID=$2
  local WIFI_PSK=$3
  local FILE_NAME="resin-wifi-`printf %02d $WIFI_NO`"

  cat << EOI > ${FILE_NAME}
  [connection]
  id=$FILE_NAME
  type=wifi

  [wifi]
  hidden=true
  mode=infrastructure
  ssid=${WIFI_SSID}

  [wifi-security]
  auth-alg=open
  key-mgmt=wpa-psk
  psk=${WIFI_PSK}

  [ipv4]
  method=auto

  [ipv6]
  addr-gen-mode=stable-privacy
  method=auto
EOI
}

####################################################################################
# wether to migrate a ssid
####################################################################################

function migrate_this_wifi {
  local ssid="$*"
  local res="FALSE"
  if [ "$MIGRATE_ALL_WIFIS" == "TRUE" ] ; then
    res="TRUE"
  else
      if [ -f "$MIGRATE_WIFI_CFG" ] ; then
        local found=$(grep -E "$ssid" "$MIGRATE_WIFI_CFG")
        if [ -n "$found" ] && [ "$found" == "$ssid" ] ; then
          res="TRUE"
        fi
      fi
  fi
  echo $res
}

####################################################################################
# extract wifi network config from wpa_supplicant.conf
####################################################################################

function wificfg_from_wpa {
  local cfgNo=1
  if [ "$HAS_WIFI_CFG" == "TRUE" ] ; then
    cfgNo=2
  fi

  while read line ;
  do
      if [[ $line =~ ^\s*network\s*=\s*\{ ]] ; then
        local network="TRUE"
        local ssid=
        local psk=
      else
        if [ "$network" == "TRUE" ] ; then
          if [[ $line =~ ^\s*} ]] ; then
            if [ -n "$ssid" ] && [ -n "$psk" ] ; then
                inform "writing wifi config for $ssid"
                create_nmgr_file $cfgNo "$ssid" "$psk"
                cfgNo=$((cfgNo + 1))
                ssid=
                psk=
            fi
            continue
          fi

          if [[ $line =~ ^\s*ssid\s*= ]] ; then
            local tmpSsid=$(expr match "$line" '\s*ssid\s*=\s*"\([^"]\+\)"')
            if [ -z "$tmpSsid" ] ; then
              tmpSsid=$(expr match "$line" '\s*ssid\s*=\s*\(\S\+\)')
            fi

            if [ "$MIGRATE_WIFI" == "ALL" ] || [[ "$MIGRATE_WIFI" == *"$tmpSsid"* ]]; then
              ssid=$tmpSsid
            fi
            continue
          fi

          if [[ $line =~ ^\s*psk\s*= ]] ; then
            psk=$(expr match "$line" '\s*psk\s*=\s*"\([^"]\+\)"')
            if [ -z "$psk" ] ; then
              psk=$(expr match "$line" '\s*psk\s*=\s*\(\S\+\)')
            fi
            continue
          fi
        fi
      fi
  done < /etc/wpa_supplicant/wpa_supplicant.conf
}

##########################################
# migrate/copy NetworkManager files
##########################################

function wificfg_from_nmgr {
  local cfgNo=1
  if [ "$HAS_WIFI_CFG" == "TRUE" ] ; then
    cfgNo=2
  fi

  for file in /etc/NetworkManager/system-connections/*; do
    local grepRes=$(grep -E "^\s*type\s*=\s*wifi" "$file")
    if [ -z "$grepRes" ] ; then
      continue
    fi
    grepRes=$(grep -E "^\s*ssid\s*=.*" "$file")
    local currSsid=$(expr match "$grepRes" 'ssid\s*=\s*\(.*\)')

    local res="$(migrate_this_wifi $currSsid)"

    if [ "$res" == "TRUE" ] ; then
      inform "migrating wifi config for $currSsid"
      # TODO: only extract certain params or copy the whole thing ?
      local fileName="resin-wifi-`printf %02d $cfgNo`"
      cp "$file" "$fileName"
      cfgNo=$((cfgNo + 1))
    fi
  done
}

##########################################
# split partition name into parts
# /dev/nvme0n1p1 -> "/dev/ nvme0n1 1 p"
##########################################

function splitPartName {
    local partName=$1
    local pathName=$(dirname "${partName}")
    local tmpName1=$(lsblk -no kname ${partName})
    local tmpName2=$(readlink -f "/sys/class/block/${tmpName1}/..")
    local devName=$(basename "${tmpName2}")
    local tmp=${tmpName1:${#devName}}
    local pad=$(expr match "${tmp}" '\([^0-9]*\)[0-9]\+')
    local no=$(expr match "${tmp}" '[^0-9]*\([0-9]\+\)')
    echo "${pathName} ${devName} ${no} ${pad}"
}

##########################################
# main : create initramfs & install it
##########################################


if [[ $EUID -ne 0 ]]; then
    fail "This script must be run as root"
fi

inform "establishing required programs"

# TODO: Check / install tools needed for initramfs too
INITRAM_REQUIRED_PGMS="mkdir dd gzip grep awk cp fuser df echo rm reboot sleep partprobe"
REQUIRED_PGMS="$INITRAM_REQUIRED_PGMS lsblk readlink" #  gzip

for PGM in $REQUIRED_PGMS
do
    PGM_PATH="$(whereis -b $PGM | awk '{ print $2}')"
    if [ -z "$PGM_PATH" ] || [ ! -f "$PGM_PATH" ] ; then
      fail "cannot find required program: $PGM as $PGM_PATH"
   fi
done

inform "checked required programs"

inform "checking required files"
if [[ ! $HOME_DIR =~ ^/.* ]] ; then
  CURR_DIR=$(pwd)
  cd $HOME_DIR || fail "invalid/non existant HOME_DIR: $HOME_DIR"
  HOME_DIR=$(pwd)
  cd $CURR_DIR
fi

inform "HOME_DIR=$HOME_DIR"

if [ ! -f "${HOME_DIR}/$IMAGE_NAME" ] ; then
  fail "missing image file: ${HOME_DIR}/$IMAGE_NAME"
fi

if [ "$MK_INITRAMFS"=="TRUE" ] && [ ! -d "${HOME_DIR}/initramfs-tools" ] ; then
  fail "missing image directory: ${HOME_DIR}/initramfs-tools"
fi


HOME_DIR=$(pwd)
ROOT_FS=$(findmnt --noheadings --canonicalize --output SOURCE /)
TMP=($(splitPartName ${ROOT_FS}))

ROOT_DEV=${TMP[0]}/${TMP[1]}

inform "ROOT_DEV=${ROOT_DEV}"

###########################
## write /etc/migrate.conf
###########################

cat <<EOI > ${MIGRATE_CONF}
#!/bin/sh
# DO NOT EDIT ! This file is supposed to be created by stage1 script

REQUIRED_PGMS="$INITRAM_REQUIRED_PGMS"
# LOG_DRIVE=/dev/sda1
LOG_FS_TYPE=ext2
LOG_MOUNT_DIR=/mnt/log
LOG_FILE=migrate.log

STRATEGY=$STRATEGY     # "DEFAULT" "RESIZE"
ROOT_DEV=${ROOT_DEV}
HOME_DIR=${HOME_DIR}
IMAGE_FILE=resin-resintest-raspberrypi3-2.15.1+rev2-dev-v7.16.6.img.gz
BACKUP_FILE=$BACKUP_FILE
DATA_TMP=/balena-tmp
MIGRATE_TMP=/balena-migrate

IMG_DATA_NAME=/dev/mmcblk0p6          # resinOS-data
# IMG_DATA_OFFSET=729808896   # resinOS-data
IMG_DATA_TYPE=ext4          # resinOS-data
# TODO: probably superfluous
MIGRATEFS_MOUNT_POINT=/balena-migrate
NO_FLASH="${NO_FLASH}"
# TODO: find the right target name
WIFI_CONFIG=wifi_1
EOI

#####################################
## USE: resize strategy - unfinished
#####################################

if [ "$STRATEGY" == "RESIZE" ] ; then
  cat <<EOI >> ${MIGRATE_CONF}
MEM_MIN_AVAIL=600000
MEM_TMPFS_SIZE=512M
RESIZE_FS="${ROOT_FS}"
RESIZE_DEV=${ROOT_DEV}
RESIZE_PART_NO=${TMP[2]}
# TODO: actually calculate this
RESIZE_PART_START=94208
RESIZE_PART_END=31116287
RESIZE_PART_TYPE=primary
RESIZE_PART_FS=ext4
RESIZE_PART_TO=26921984
RESIZE_PART_SIZE=26827777

NEW_PART_TYPE="primary"
NEW_PART_FS="ext2"
NEW_PART_START=26926080
NEW_PART_TO=31022087
NEW_PART_NAME=/dev/mmcblk0p3
REQUIRED_PGMS="$INITRAM_REQUIRED_PGMS"
EOI
fi

if [ "${MK_INITRAMFS}" == TRUE ] ; then
    OPTS="-d ${HOME_DIR}/initramfs-tools -o ${HOME_DIR}/${INITRAMFS_NAME}"
    if [ "$MK_INITRAM_VERBOSE" == "TRUE" ] ; then
      OPTS="-v $OPTS"
    fi

    if [ "$MK_INITRAM_RETAIN" == "TRUE" ] ; then
      OPTS="-k $OPTS"
    fi

    inform "creating initramfs: mkinitramfs $OPTS"
    mkinitramfs $OPTS || fail "failed to create initramfs in ${HOME_DIR}/${INITRAMFS_NAME}"

    inform "copying initramfs"
    cp ${HOME_DIR}/${INITRAMFS_NAME} /boot || fail "failed to copy ${HOME_DIR}/${INITRAMFS_NAME} to /boot"
fi


if [ "$NO_SETUP" != "TRUE" ] ; then
  ##########################
  ## Modify /boot/config.txt
  ##########################

  inform "making backup of config.txt"
  CONFIG_TXT_BACKUP="${CONFIG_TXT}.$(date +%Y%m%d-%H-%M-%S)"
  TMP_FILE=$(mktemp)
  INITRAM_CMD="initramfs ${INITRAMFS_NAME} followkernel"

  while read -r line
  do
    if [[ $line =~ ^\s*\# ]] ; then
      echo $line >> $TMP_FILE
      continue
    fi

    if [[ $line =~ ^\s*initramfs ]] ; then
      if [ "$line" != "$INITRAM_CMD" ] ; then
        echo "# $line" >> $TMP_FILE
      fi
    else
      echo $line >> $TMP_FILE
    fi
  done < "${CONFIG_TXT}"
  echo $INITRAM_CMD >> $TMP_FILE
  cp $TMP_FILE $CONFIG_TXT
  rm $TMP_FILE

  ###########################
  ## Modify /boot/cmdline.txt
  ###########################

  if [ "$DEBUG" == "TRUE" ] ; then
    CMD_LINE=$(cat ${CMDLINE_TXT})
    if [[ ! $CMD_LINE =~ debug ]] ; then
      inform "making backup of ${CMDLINE_TXT}"
      CMDLINE_TXT_BACKUP="${CMDLINE_TXT}.$(date +%Y%m%d-%H-%M-%S)"
      cp ${CMDLINE_TXT}  ${CMDLINE_TXT_BACKUP}
    	CMD_LINE="${CMD_LINE} debug"
    	echo $CMD_LINE > cmdline.txt
    fi
  fi
fi

###########################
## create backup
###########################

if [ -n "$BACKUP_DIRECTORIES" ] ; then
  inform "creating backup in ${HOME_DIR}/$BACKUP_FILE"
  rm ${HOME_DIR}/$BACKUP_FILE || true
  tar -czf ${HOME_DIR}/$BACKUP_FILE $BACKUP_DIRECTORIES
  inform "done creating backup"
  # TODO: check / restrict size of backup file
fi

###########################
## migrate network config
###########################

if [ "$MIGRATE_ALL_WIFIS"=="TRUE" ] || [ -n "$MIGRATE_WIFI_CFG" ] ; then
  if [ -f /etc/wpa_supplicant/wpa_supplicant.conf ] ; then
    wificfg_from_wpa
  else
    if [ -d /etc/NetworkManager/system-connections/ ] ; then
      wificfg_from_nmgr
    else
      warn "no supported wifi config found"
    fi
  fi
  # TODO: migrate wifi config
fi

###########################
## create backup
###########################

if [ "$DO_REBOOT" == "TRUE" ] ; then
  inform "rebooting system in 5 seconds"
  sleep 5
  reboot
fi
