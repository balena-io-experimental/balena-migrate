#!/bin/sh
PREREQ=""
prereqs()
{
	echo "$PREREQ"
}

case $1 in
prereqs)
	prereqs
	exit 0
	;;
esac

my_mount_root()
{
        local_top
        local_device_setup "${ROOT}" "root file system"
        ROOT="${DEV}"

        # Get the root filesystem type if not set
        if [ -z "${ROOTFSTYPE}" ]; then
                FSTYPE=$(get_fstype "${ROOT}")
        else
                FSTYPE=${ROOTFSTYPE}
        fi

        local_premount

      	roflag=-w

        # FIXME This has no error checking
        modprobe ${FSTYPE}

        checkfs ${ROOT} root "${FSTYPE}"

        # FIXME This has no error checking
        # Mount root
        if [ "${FSTYPE}" != "unknown" ]; then
                mount ${roflag} -t ${FSTYPE} ${ROOTFLAGS} ${ROOT} ${DATA_TMP}
        else
                mount ${roflag} ${ROOTFLAGS} ${ROOT} ${DATA_TMP}
        fi
}


set -e

if [ -f /scripts/functions ] ; then
    . /scripts/functions
fi

if [ -f /scripts/local ] ; then
    . /scripts/local
fi

# _log_msg ""

log_success_msg "local-premount balena-stage2 started params: $1 $2 $3"

if [ -f /etc/balena-migrate.conf ] ; then
    . /etc/balena-migrate.conf
else
    # TODO: try to rebuild former boot config
    # where is boot mounted
    panic "balena-migrate.conf not found"
fi

if [ "$STRATEGY" = "NO" ] ; then
	log_success_msg "local-premount balena-stage2 with no temp storage enabled"

	log_begin_msg "creating directory ${MIGRATE_TMP}"
	mkdir -p ${MIGRATE_TMP}
	if [ ! -d ${MIGRATE_TMP} ] ; then
	     panic "failed to create directory ${MIGRATE_TMP}"
	fi
	log_end_msg

	log_begin_msg "creating mountpoint on ${DATA_TMP}"
	mkdir -p ${DATA_TMP}
	if [ ! -d ${DATA_TMP} ] ; then
	     panic "failed to create mount directory in ${DATA_TMP}"
	fi
	log_end_msg

	# my_mount_root || panic "failed to premount root"

	#log_begin_msg "copying image from ${DATA_TMP}${HOME_DIR}/${IMAGE_FILE} to ${MIGRATE_TMP}"
	#cp "${DATA_TMP}${HOME_DIR}/${IMAGE_FILE}" "${MIGRATE_TMP}" || true # panic "failed to copy ${DATA_TMP}${HOME_DIR}/${IMAGE_FILE}  to ${MIGRATE_TMP}"
	#log_end_msg

	#umount ${DATA_TMP} || panic "failed to unmount premounted root"
	log_success_msg "image copied, root unmounted \n"
else
	if [  "$STRATEGY" = "RESIZE" ] ; then
	  log_success_msg "local-premount balena-stage2-resized enabled"

		_log_msg "resizing fs ${RESIZE_FS} to ${RESIZE_PART_TO}"
		e2fsck -f -p "${RESIZE_FS}" || panic "failed: e2fsck ${RESIZE_FS}"
		resize2fs -f "${RESIZE_FS}" ${RESIZE_PART_SIZE}s || panic "failed: resize2fs ${RESIZE_FS} ${RESIZE_PART_SIZE}s"
		parted --script "${RESIZE_DEV}" rm ${RESIZE_PART_NO} || panic "failed: parted --script ${RESIZE_DEV} rm ${RESIZE_PART_NO}"
		parted --script "${RESIZE_DEV}" mkpart "${RESIZE_PART_TYPE}" "${RESIZE_PART_FS}" ${RESIZE_PART_START}s ${RESIZE_PART_TO}s || panic "failed: parted --script ${RESIZE_DEV} mkpart ${RESIZE_PART_TYPE} ${RESIZE_PART_FS} ${RESIZE_PART_START}s ${RESIZE_PART_TO}s"
		parted --script "${RESIZE_DEV}" mkpart "${NEW_PART_TYPE}" "${NEW_PART_FS}" ${NEW_PART_START}s ${NEW_PART_TO}s || panic "failed: parted --script ${RESIZE_DEV} mkpart ${NEW_PART_TYPE} ${NEW_PART_FS} ${NEW_PART_START}s ${NEW_PART_TO}s"
		mke2fs -t "${NEW_PART_FS}" "${NEW_PART_NAME}" || panic "failed: mke2fs -t ${NEW_PART_FS} ${NEW_PART_NAME}"
	fi
fi
