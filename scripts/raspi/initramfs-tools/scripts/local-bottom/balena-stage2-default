#!/bin/sh

PREREQ=""
prereqs()
{
	echo "$PREREQ"
}

case $1 in
prereqs)
	prereqs
	exit 0
	;;
esac

set -e

if [ -f /scripts/functions ] ; then
    . /scripts/functions
fi

if [ -f /scripts/local ] ; then
    . /scripts/local
fi

# reboot -f

if [ -f /etc/balena-migrate.conf ] ; then
    . /etc/balena-migrate.conf
else
    panic  "balena-migrate.conf not found"
fi

if [ -f /scripts/balena-common ] ; then
    . /scripts/balena-common
else
		panic  "/scripts/balena-common not found"
fi

if [  "$STRATEGY" != "DEFAULT" ] ; then
    log "local-premount balena-stage2-default not enabled"
    exit 0
fi

# TODO: make sure required programs are actually present

FAIL_EXIT="EXIT"

LOG_TO=
log_to "${MIGRATE_TMP}/${LOG_FILE}"

log "local-bottom balena-stage2-default started"


if [ -n "$LOG_DRIVE" ] ; then
	# TODO: needs to wait for USB drive to show up
	mkdir -p ${LOG_MOUNT_DIR} || fail "failed to create mount dir ${LOG_MOUNT_DIR}"
	loopCount=0
	while [ ! -b "$LOG_DRIVE" ] && [ $loopCount -lt 3 ] ;
	do
	   log "log device not present: $LOG_DRIVE waiting.."
	   udevadm settle --timeout=10
	   sleep 10
	   loopCount=$(($loopCount + 1))
	done
	mount -w -t ${LOG_FS_TYPE} ${LOG_DRIVE} ${LOG_MOUNT_DIR} || fail "failed to mount log dir using mount -w -t ${LOG_FS_TYPE} ${LOG_DRIVE} ${LOG_MOUNT_DIR}"
	log_to "${LOG_MOUNT_DIR}/${LOG_FILE}"
	log "logging to ${LOG_MOUNT_DIR}/${LOG_FILE}"
fi

log "creating migrate dir ${MIGRATE_TMP}"
mkdir -p ${MIGRATE_TMP} || fail "failed to create directory ${MIGRATE_TMP}"
if [ ! -d ${MIGRATE_TMP} ] ; then
     fail  "failed to create directory in ${MIGRATE_TMP}"
fi
log "...done"

log "copying image from ${rootmnt}${HOME_DIR}/${IMAGE_FILE} to ${MIGRATE_TMP}/"
cp "${rootmnt}${HOME_DIR}/${IMAGE_FILE}" "${MIGRATE_TMP}/" || fail  "failed to copy ${rootmnt}${HOME_DIR}/${IMAGE_FILE}  to ${MIGRATE_TMP}/"
log "..done"

if [ -f "${rootmnt}${HOME_DIR}/${BACKUP_FILE}" ] ; then
	log "copying backup from ${rootmnt}${HOME_DIR}/${BACKUP_FILE} to ${MIGRATE_TMP}/"
	cp "${rootmnt}${HOME_DIR}/${BACKUP_FILE}" "${MIGRATE_TMP}/" || fail  "failed to copy ${rootmnt}${HOME_DIR}/${IMAGE_FILE}  to ${MIGRATE_TMP}/"
	log "..done"
fi

log "copying network config files to initramfs"
if [ -f "${rootmnt}${HOME_DIR}/resin-wifi-01" ] ; then
	cp "${rootmnt}${HOME_DIR}/resin-wifi-01" "${MIGRATE_TMP}/" >>"$LOG_TO" 2>&1  || log "no network config copied"
fi

for file in $NETWORK_CONFIGS; do
	log "copying ${rootmnt}${HOME_DIR}/$file"
	cp "${rootmnt}${HOME_DIR}/$file" "${MIGRATE_TMP}/$file" >>"$LOG_TO" 2>&1  || log "no network config copied"
done

log "..done"

log "creating mountpoint on ${BOOT_MNT_DIR}"
mkdir -p ${BOOT_MNT_DIR} || fail "failed to create directory ${BOOT_MNT_DIR}"
if [ ! -d ${BOOT_MNT_DIR} ] ; then
     fail  "failed to create mount directory in ${BOOT_MNT_DIR}"
fi
log "..done"

log "creating mountpoint on ${DATA_MNT_DIR}"
mkdir -p ${DATA_MNT_DIR}  || fail "failed to create directory ${DATA_MNT_DIR}"
if [ ! -d ${DATA_MNT_DIR} ] ; then
     fail  "failed to create mount directory in ${DATA_MNT_DIR}"
fi
log "..done"

if [ "$NO_FLASH" = "TRUE" ] ; then
	term "terminating prematurely"
	if [ -n "$ERROR_EXIT" ] ; then
		$ERROR_EXIT
	else
		exit 0
	fi
fi

log "unmounting root"
umount ${rootmnt} || fail  "failed umount ${rootmnt}"
# TODO: remount as third exit ?
FAIL_EXIT="REBOOT"
log "..done"


log "flashing image from ${MIGRATE_TMP}/${IMAGE_FILE} to ${ROOT_DEV} "
log "attempting gzip -d -c ${MIGRATE_TMP}/${IMAGE_FILE} | dd of=${ROOT_DEV} bs=4M \n"
gzip -d -c "${MIGRATE_TMP}/${IMAGE_FILE}" | dd of=${ROOT_DEV} bs=4194304 || fail  "failed with gzip -d -c ${MIGRATE_TMP}/${IMAGE_FILE} | dd of=${ROOT_DEV} bs=4194304"
log "..done"

partprobe $ROOT_DEV >>"$LOG_TO" 2>&1 || fail  "failed to reread partitions on $ROOT_DEV"

DEVS=$(lsblk)
log "devices after partprobe: $DEVS"

log "mounting resin-data using: mount -w -t $DATA_PART_TYPE $DATA_PART_NAME $DATA_MNT_DIR"
mount -w -t $DATA_PART_TYPE $DATA_PART_NAME "$DATA_MNT_DIR" >>$LOG_TO 2>&1 || fail  "failed to mount resin-data partition"
log_to "$DATA_MNT_DIR/$LOG_FILE"
log "..done"

if [ -f "${MIGRATE_TMP}/${BACKUP_FILE}" ] ; then
	log "copying backup to resin-data"
	cp "$MIGRATE_TMP/$BACKUP_FILE" "$DATA_MNT_DIR" >>$LOG_TO 2>&1 || fail "failed to create backup"
	sync
	log "...done"
fi


log "mounting resin-boot using: mount -w -t $BOOT_PART_TYPE $BOOT_PART_NAME $BOOT_MNT_DIR"
mount -w -t $BOOT_PART_TYPE $BOOT_PART_NAME "$BOOT_MNT_DIR" >>"$LOG_TO" 2>&1 || fail  "failed to mount resin-boot partition"
log "..done"

# copy networking config
log "copying network config to resin-boot "
for file in $NETWORK_CONFIGS; do
	log "copying ${MIGRATE_TMP}/$file"
	cp "${MIGRATE_TMP}/$file" "${BOOT_MNT_DIR}/system-connections/$file" >>"$LOG_TO" 2>&1  || log "no network config copied"
done
log "..done"

if [ "$GRUB_INSTALL" = "TRUE" ] ; then
	log "attempting grub install with type $GRUB_BOOT_TYPE"
	if [ -f ${MIGRATE_TMP}/grub.cfg ] ; then
		cp ${MIGRATE_TMP}/grub.cfg ${BOOT_MNT_DIR}/grub/ || fail "failed to copy ${MIGRATE_TMP}/grub.cfg"
	fi

	if [ "$GRUB_BOOT_TYPE" = "legacy" ] ; then
	# if [ "${FLASH_BOOTLOADER}" == "TRUE" ] ; then
	# 		inform "flashing boot.img os to ${ORIG_BOOT_DEV}"
	# 		dd if=${BOOT_IMG_FILE} of=${ORIG_BOOT_DEV} conv=fdatasync bs=1
	# 		inform "flashing core.img os to ${ORIG_BOOT_DEV}"
	# 		dd if=${CORE_IMG_FILE} of=${ORIG_BOOT_DEV} conv=fdatasync bs=1 seek=512
	# fi

#--modules="biosdisk part_msdos ext2 configfile normal multiboot" \

		grub-install 	--no-floppy \
									--grub-mkdevicemap=${MIGRATE_TMP}/device.map \
									--boot-directory=${BOOT_MNT_DIR} \
									${ROOT_DEV} >>"$LOG_TO" 2>&1 || fail "failed to install grub"
	fi
fi

# saveLog || true
sync || true
reboot -f
